{"version":3,"sources":["form-render.min.js","form-render.js"],"names":["$","fn","formRender","options","$template","this","defaults","destroyTemplate","container","_helpers","opts","extend","markup","type","attrs","arguments","length","undefined","content","attrString","Array","isArray","join","inlineElems","template","indexOf","fieldRender","field","fieldMarkup","optionsMarkup","fieldAttrs","parseAttrs","attributes","fieldOptions","description","id","name","fieldLabel","label","fieldAttrsString","value","replace","each","index","el","optionAttrs","optionAttrsString","innerHTML","optionName","toggle","setTimeout","document","getElementById","kcToggle","attr","hasOwnProperty","push","attrNodes","rendered","formData","parseXML","val","fields","alert","output","html","replaceWith","jQuery"],"mappings":"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","file":"form-render.min.js","sourcesContent":["// render the formBuilder XML into html\n'use strict';\n\n(function ($) {\n  'use strict';\n  $.fn.formRender = function (options) {\n    var $template = $(this),\n        defaults = {\n      destroyTemplate: true, // @todo\n      container: false\n    },\n        _helpers = {};\n\n    var opts = $.extend(defaults, options);\n\n    /**\n     * Generate markup wrapper where needed\n     * @param  {string} type\n     * @param  {object} attrs\n     * @param  {string} content we wrap this\n     * @return {string}\n     */\n    _helpers.markup = function (type) {\n      var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n      attrs = _helpers.attrString(attrs);\n      content = Array.isArray(content) ? content.join('') : content;\n      var inlineElems = ['input'],\n          template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n      return template;\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} field\n     * @return {string}       preview markup for field\n     */\n    _helpers.fieldRender = function (field) {\n      var fieldMarkup = '',\n          optionsMarkup = '';\n      var fieldAttrs = _helpers.parseAttrs(field.attributes),\n          fieldDesc = fieldAttrs.description,\n          // @todo\n      fieldOptions = $('option', field);\n      fieldAttrs.id = fieldAttrs.name;\n      if (fieldAttrs.type !== 'checkbox') {\n        fieldAttrs['class'] = 'form-control';\n      }\n\n      var fieldLabel = '<label for=\"' + fieldAttrs.id + '\">' + fieldAttrs.label + '</label>';\n\n      delete fieldAttrs.label;\n      delete fieldAttrs.description;\n\n      var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n      switch (fieldAttrs.type) {\n        case 'textarea':\n        case 'rich-text':\n          delete fieldAttrs.type;\n          delete fieldAttrs.value;\n          fieldMarkup = fieldLabel + '<textarea ' + fieldAttrsString + '></textarea>';\n          break;\n        case 'select':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          if (fieldOptions.length) {\n            fieldOptions.each(function (index, el) {\n              var optionAttrs = _helpers.parseAttrs(el.attributes),\n                  optionAttrsString = _helpers.attrString(optionAttrs);\n\n              optionsMarkup += '<option ' + optionAttrsString + '>' + el.innerHTML + '</option>';\n            });\n          }\n          fieldMarkup = fieldLabel + '<select ' + fieldAttrsString + '>' + optionsMarkup + '</select>';\n          break;\n        case 'checkbox-group':\n        case 'radio-group':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n          delete fieldAttrs['class'];\n\n          if (fieldOptions.length) {\n            (function () {\n              var optionName = fieldAttrs.name + '[]';\n              fieldOptions.each(function (index, el) {\n                var optionAttrs = $.extend(fieldAttrs, _helpers.parseAttrs(el.attributes));\n                optionAttrs.name = optionName;\n                optionAttrs.id = fieldAttrs.id + '-' + index;\n                var optionAttrsString = _helpers.attrString(optionAttrs);\n\n                optionsMarkup += '<input ' + optionAttrsString + ' /> <label for=\"' + optionAttrs.id + '\">' + el.innerHTML + '</label><br>';\n              });\n            })();\n          }\n          fieldMarkup = fieldLabel + '<div class=\"' + fieldAttrs.type + '-group\">' + optionsMarkup + '</div>';\n          break;\n        case 'text':\n        case 'password':\n        case 'email':\n        case 'date':\n        case 'autocomplete':\n          fieldMarkup = fieldLabel + ' <input ' + fieldAttrsString + '>';\n          break;\n        case 'checkbox':\n          fieldMarkup = '<input ' + fieldAttrsString + '> ' + fieldLabel;\n\n          if (fieldAttrs.toggle) {\n            setTimeout(function () {\n              $(document.getElementById(fieldAttrs.id)).kcToggle();\n            }, 100);\n          }\n          break;\n        default:\n          fieldMarkup = '<' + fieldAttrs.type + '></' + fieldAttrs.type + '>';\n      }\n\n      return '<div class=\"form-group\">' + fieldMarkup + '</div>';\n    };\n\n    _helpers.attrString = function (attrs) {\n      var attributes = [];\n      for (var attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n          attributes.push(attr + '=\"' + attrs[attr] + '\"');\n        }\n      }\n      return attributes.join(' ');\n    };\n\n    _helpers.parseAttrs = function (attrNodes) {\n      var fieldAttrs = {};\n      for (var attr in attrNodes) {\n        if (attrNodes.hasOwnProperty(attr)) {\n          fieldAttrs[attrNodes[attr]['nodeName']] = attrNodes[attr]['nodeValue'];\n        }\n      }\n      return fieldAttrs;\n    };\n\n    // Begin the core plugin\n    this.each(function () {\n      var rendered = [];\n\n      var formData = $.parseXML($template.val()),\n          fields = $('field', formData),\n          settings = $('settings', formData); // @todo\n\n      if (!formData) {\n        alert('No formData. Add some fields and try again');\n        return false;\n      }\n\n      // generate field markup if we have fields\n      if (fields.length) {\n        fields.each(function (index, field) {\n          index = index;\n          rendered.push(_helpers.fieldRender(field));\n        });\n      }\n\n      var output = rendered.join('');\n\n      if (opts.container && opts.container.length) {\n        opts.container.html(output);\n      } else {\n        $template.replaceWith(output);\n      }\n    });\n  };\n})(jQuery);","// render the formBuilder XML into html\n(function($) {\n  'use strict';\n  $.fn.formRender = function(options) {\n    var $template = $(this),\n      defaults = {\n        destroyTemplate: true, // @todo\n        container: false\n      },\n      _helpers = {};\n\n    var opts = $.extend(defaults, options);\n\n    /**\n     * Generate markup wrapper where needed\n     * @param  {string} type\n     * @param  {object} attrs\n     * @param  {string} content we wrap this\n     * @return {string}\n     */\n    _helpers.markup = function(type, attrs = {}, content = '') {\n      attrs = _helpers.attrString(attrs);\n      content = Array.isArray(content) ? content.join('') : content;\n      let inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n      return template;\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} field\n     * @return {string}       preview markup for field\n     */\n    _helpers.fieldRender = function(field) {\n      var fieldMarkup = '',\n        optionsMarkup = '';\n      var fieldAttrs = _helpers.parseAttrs(field.attributes),\n        fieldDesc = fieldAttrs.description, // @todo\n        fieldOptions = $('option', field);\n      fieldAttrs.id = fieldAttrs.name;\n      if (fieldAttrs.type !== 'checkbox') {\n        fieldAttrs.class = 'form-control';\n      }\n\n      var fieldLabel = `<label for=\"${fieldAttrs.id}\">${fieldAttrs.label}</label>`;\n\n      delete fieldAttrs.label;\n      delete fieldAttrs.description;\n\n      var fieldAttrsString = _helpers.attrString(fieldAttrs);\n\n      switch (fieldAttrs.type) {\n        case 'textarea':\n        case 'rich-text':\n          delete fieldAttrs.type;\n          delete fieldAttrs.value;\n          fieldMarkup = `${fieldLabel}<textarea ${fieldAttrsString}></textarea>`;\n          break;\n        case 'select':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n\n          if (fieldOptions.length) {\n            fieldOptions.each(function(index, el) {\n              let optionAttrs = _helpers.parseAttrs(el.attributes),\n                optionAttrsString = _helpers.attrString(optionAttrs);\n\n              optionsMarkup += `<option ${optionAttrsString}>${el.innerHTML}</option>`;\n            });\n          }\n          fieldMarkup = `${fieldLabel}<select ${fieldAttrsString}>${optionsMarkup}</select>`;\n          break;\n        case 'checkbox-group':\n        case 'radio-group':\n          fieldAttrs.type = fieldAttrs.type.replace('-group', '');\n          delete fieldAttrs.class;\n\n          if (fieldOptions.length) {\n            let optionName = fieldAttrs.name + '[]'\n            fieldOptions.each(function(index, el) {\n              let optionAttrs = $.extend(fieldAttrs, _helpers.parseAttrs(el.attributes));\n              optionAttrs.name = optionName;\n              optionAttrs.id = fieldAttrs.id + '-' + index;\n              let optionAttrsString = _helpers.attrString(optionAttrs);\n\n              optionsMarkup += `<input ${optionAttrsString} /> <label for=\"${optionAttrs.id}\">${el.innerHTML}</label><br>`;\n            });\n          }\n          fieldMarkup = `${fieldLabel}<div class=\"${fieldAttrs.type}-group\">${optionsMarkup}</div>`;\n          break;\n        case 'text':\n        case 'password':\n        case 'email':\n        case 'date':\n        case 'autocomplete':\n          fieldMarkup = `${fieldLabel} <input ${fieldAttrsString}>`;\n          break;\n        case 'checkbox':\n          fieldMarkup = `<input ${fieldAttrsString}> ${fieldLabel}`;\n\n          if (fieldAttrs.toggle) {\n            setTimeout(function() {\n              $(document.getElementById(fieldAttrs.id)).kcToggle();\n            }, 100);\n          }\n          break;\n        default:\n          fieldMarkup = `<${fieldAttrs.type}></${fieldAttrs.type}>`;\n      }\n\n      return `<div class=\"form-group\">${fieldMarkup}</div>`;\n    };\n\n    _helpers.attrString = function(attrs) {\n      var attributes = [];\n      for (var attr in attrs) {\n        if (attrs.hasOwnProperty(attr)) {\n          attributes.push(attr + '=\"' + attrs[attr] + '\"');\n        }\n      }\n      return attributes.join(' ');\n    };\n\n    _helpers.parseAttrs = function(attrNodes) {\n      var fieldAttrs = {};\n      for (var attr in attrNodes) {\n        if (attrNodes.hasOwnProperty(attr)) {\n          fieldAttrs[attrNodes[attr]['nodeName']] = attrNodes[attr]['nodeValue'];\n        }\n      }\n      return fieldAttrs;\n    };\n\n    // Begin the core plugin\n    this.each(function() {\n      var rendered = [];\n\n      var formData = $.parseXML($template.val()),\n        fields = $('field', formData),\n        settings = $('settings', formData); // @todo\n\n      if (!formData) {\n        alert('No formData. Add some fields and try again');\n        return false;\n      }\n\n      // generate field markup if we have fields\n      if (fields.length) {\n        fields.each(function(index, field) {\n          index = index;\n          rendered.push(_helpers.fieldRender(field));\n        });\n      }\n\n      var output = rendered.join('');\n\n      if (opts.container && opts.container.length) {\n        opts.container.html(output);\n      } else {\n        $template.replaceWith(output);\n      }\n\n    });\n  };\n})(jQuery);\n"],"sourceRoot":"/source/"}