{"version":3,"sources":["form-builder.min.js","helpers.js","properties.js","kc-toggle.js","to-xml.js","form-builder.js"],"names":["_helpers","opts","doCancel","$form","$","document","getElementById","formID","uniqueArray","arrArg","filter","elem","pos","arr","indexOf","startDrag","event","ui","item","addClass","startIndex","this","index","stopDrag","removeClass","sender","sortable","safename","str","replace","toLowerCase","forceNumber","initTooltip","tt","tooltip","find","mouseenter","outerWidth","css","width","stop","fadeIn","mouseleave","fadeOut","hide","save","children","not","dataType","val","toXML","updatePreview","field","preview","html","nameAttr","type","epoch","Date","getTime","htmlEncode","value","text","htmlDecode","validateForm","errors","each","parents","fieldAttr","push","error","labels","labelEmpty","attribute","length","alert","animate","scrollTop","offset","top","targetID","attr","parent","next","slideUp","slideDown","disabledTT","title","removeAttr","data","class","append","outerHeight","left","remove","String","prototype","toCamelCase","matches","toUpperCase","markup","attrs","arguments","undefined","content","attrString","Array","isArray","join","inlineElems","template","attributes","hasOwnProperty","removeField","$field","Properties","UTIL","fieldData","properties","_utils","order","meta","roles","options","map","inArray","maxLength","optionFields","option","prop","label","name","propName","propValue","defaultProp","id","lastID","fields","propMap","property","extend","Map","propType","required","set","get","_x","_again","_function","Toggle","element","defaults","theme","off","on","$kcToggle","insertAfter","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","fn","kcToggle","toggle","jQuery","prepend","serialStr","liCount","c","hasClass","att","multipleChecked","multiple","t","multipleField","match","fName","fLabel","roleVals","n","desc","maxLengthVal","fSlash","fToggle","$option","optionValue","optionLabel","selected","FormBuilder","Field","disableFields","defaultFields","saveUrl","showWarning","serializePrefix","add","allowSelect","autocomplete","cannotBeEmpty","checkboxGroup","checkbox","checkboxes","clearAllMessage","clearAll","close","copy","date","description","descriptionField","devMode","editNames","editXML","fieldRemoveWarning","getStarted","limitRole","mandatory","minOptionMessage","no","optional","optionLabelPlaceholder","optionValuePlaceholder","optionEmpty","paragraph","radioGroup","radio","removeMessage","selectOptions","select","selectionsMessage","textarea","warning","viewXML","yes","frmbID","boxID","json","fieldTypes","cbUL","frmbFields","fieldLabel","idName","saveBtn","formActions","actionLinksInner","actionLinks","$sortableFields","cursor","opacity","beforeStop","lastIndex","curIndex","placeholder","over","target","start","cancel","helper","connectWith","revert","after","update","stopIndex","prepFieldVars","receive","before","cbWrap","$formWrap","doSave","getTemplate","xml","parseXML","i","appendField","disabledBeforeAfter","li","delBtn","toggleBtn","fieldActions","liContent","fieldSettings","data-type","fieldPreview","eq","propOrder","propertyMarkup","section","fieldProperties","fieldMarkup","fieldSetting","depth","propertyId","setting","charAt","slice","setTimeout","for","fieldAttrs","templates","password","Object","assign","email","textArea","opt","reverse","forEach","e","preventDefault","optionsCount","slideToggle","closest","closestToolTip","showRemoveWarning","dialog","modal","resizable","dialogClass","buttons","requiredAsterisk","siblings","enableRolesCB","trigger","console","log","$pre","overlay","color","window","confirm","empty","hover","triggerDevMode","keys","devCode","mouseover","mouseout","documentElement","keydown","keyCode","toString","dml","show","height","wrap","formBuilder","form","existingFormBuilder","newElement","clone"],"mappings":"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","file":"form-builder.min.js","sourcesContent":["'use strict';\n\nvar _helpers = function _helpers(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n      $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = function (arrArg) {\n    return arrArg.filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function (event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function (event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function (str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function (str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function (tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function () {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function () {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function () {\n\n    var $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function (field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function (type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function (value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function (value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function () {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function () {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n            fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function () {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function () {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function (field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function () {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function () {\n    return this.replace(/(\\-\\w)/g, function (matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function (type) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    var inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n    return template;\n  };\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function ($field) {\n    $field.slideUp(250, function () {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n'use strict';\n\nvar Properties = function Properties(UTIL, opts, fieldData) {\n  'use strict';\n\n  var properties = this,\n      _utils = {};\n\n  properties.order = {\n    meta: ['label', 'description', 'roles'],\n    attrs: ['required', 'name', 'class']\n  };\n\n  properties.roles = function () {\n    var roles = {\n      value: 1,\n      type: 'checkbox'\n    };\n\n    roles.options = fieldData.meta.roles.map(function (elem) {\n      elem.type = 'checkbox';\n      return elem;\n    });\n  };\n\n  // if field type is not checkbox, checkbox/radio group or select list, add max length\n  if ($.inArray(fieldData.type, ['checkbox', 'select', 'checkbox-group', 'date', 'autocomplete']) === -1 && !fieldData.attrs.maxLength) {\n    fieldData.attrs.maxLength = '';\n    properties.order.attrs.push('maxLength');\n  }\n\n  // options need a field for value, label and checkbox to select\n  if (fieldData.options) {\n    var optionFields = fieldData.options.map(function (elem, index) {\n      var option = {\n        options: [],\n        type: 'none'\n      };\n      for (var prop in elem) {\n        if (elem.hasOwnProperty(prop)) {\n          var field = {\n            value: elem[prop],\n            label: prop,\n            name: 'option-' + prop\n          };\n          if ('selected' === prop) {\n            field.type = 'checkbox';\n          }\n          option.options.push(field);\n        }\n      }\n      return option;\n    });\n\n    fieldData.options = {\n      options: optionFields,\n      label: opts.labels.options,\n      type: 'none'\n    };\n  }\n\n  _utils.field = function (propName, propValue) {\n    var defaultProp = {\n      name: UTIL.nameAttr(propName),\n      id: (propName + '-' + UTIL.lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\n      label: opts.labels[name.toCamelCase()],\n      fields: [],\n      type: _utils.propMap('type', propName),\n      value: ''\n    },\n        property = undefined;\n    if (typeof propValue === 'object') {\n      property = $.extend(defaultProp, propValue);\n    } else {\n      property = $.extend({}, defaultProp);\n    }\n\n    return property;\n  };\n\n  _utils.propMap = function (type, name) {\n    var propMap = new Map(),\n        propType = {\n      required: 'checkbox',\n      roles: 'checkbox'\n    };\n    propMap.set('type', propType);\n\n    return propMap.get(type)[name] || 'text';\n  };\n\n  _utils.fields = (function getFields(_x) {\n    var _again = true;\n\n    _function: while (_again) {\n      var fieldData = _x;\n      _again = false;\n\n      fieldData.fields = {};\n\n      for (var prop in fieldData) {\n        if (fieldData.hasOwnProperty(prop)) {\n          fieldData.fields[prop] = [];\n          if (typeof fieldData[prop] === 'object') {\n            _x = fieldData[prop];\n            _again = true;\n            prop = undefined;\n            continue _function;\n          } else {\n            var field = _utils.field(prop, fieldData[prop]);\n            fieldData.fields[prop].push(field);\n          }\n        }\n      }\n\n      return fieldData.fields;\n    }\n  })(fieldData);\n\n  return properties;\n};\n'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n\n(function ($) {\n  'use strict';\n  $.fn.toXML = function (options) {\n    var defaults = {\n      prepend: '',\n      attributes: ['class']\n    };\n    var opts = $.extend(defaults, options);\n\n    var serialStr = '';\n\n    // Begin the core plugin\n    this.each(function () {\n      var liCount = 0;\n      var c = 1;\n\n      if ($(this).children().length >= 1) {\n        serialStr += '<form-template>\\n\\t<fields>';\n\n        // build new xml\n        $(this).children().each(function () {\n          var $field = $(this);\n          if (!($field.hasClass('moving') || $field.hasClass('disabled'))) {\n            for (var att = 0; att < opts.attributes.length; att++) {\n              var required = $('input.required', $field).is(':checked') ? 'required=\"true\" ' : 'required=\"false\" ',\n                  multipleChecked = $('input[name=\"multiple\"]', $field).is(':checked'),\n                  multiple = multipleChecked ? 'style=\"multiple\" ' : '',\n                  t = $field.attr(opts.attributes[att]).replace(' form-field', ''),\n                  // field type\n              multipleField = t.match(/(select|checkbox-group|radio-group)/),\n                  type = 'type=\"' + t + '\" ',\n                  fName = 'name=\"' + $('input.fld-name', $field).val() + '\" ',\n                  fLabel = 'label=\"' + $('input.fld-label', $field).val() + '\" ',\n                  roleVals = $.map($('input.roles-field:checked', $field), function (n) {\n                return n.value;\n              }).join(','),\n                  roles = roleVals !== '' ? 'role=\"' + roleVals + '\" ' : '',\n                  desc = 'description=\"' + $('input.fld-description', $field).val() + '\" ',\n                  maxLengthVal = $('input.fld-max-length', $field).val(),\n                  maxLength = 'max-length=\"' + (maxLengthVal !== undefined ? maxLengthVal : '') + '\" ',\n                  fSlash = !multipleField ? '/' : '';\n\n              var fToggle = $('.checkbox-toggle', $field).is(':checked') ? 'toggle=\"true\" ' : '';\n\n              serialStr += '\\n\\t\\t<field ' + fName + fLabel + fToggle + multiple + roles + desc + (maxLengthVal !== '' ? maxLengthVal !== undefined ? maxLength : '' : '') + required + type + fSlash + '>';\n              if (multipleField) {\n                c = 1;\n                $('.sortable-options li', $field).each(function () {\n                  var $option = $(this),\n                      optionValue = 'value=\"' + $('.option-value', $option).val() + '\"',\n                      optionLabel = $('.option-label', $option).val(),\n                      selected = $('.select-option', $option).is(':checked') ? ' selected=\"true\"' : '';\n                  serialStr += '\\n\\t\\t\\t<option' + selected + ' ' + optionValue + '>' + optionLabel + '</option>';\n                  c++;\n                });\n                serialStr += '\\n\\t\\t</field>';\n              }\n            }\n          }\n          liCount++;\n        });\n        serialStr += '\\n\\t</fields>\\n</form-template>';\n      } // if \"$(this).children().length >= 1\"\n    });\n    return serialStr;\n  };\n})(jQuery);\n'use strict';\n\n(function ($) {\n  'use strict';\n  var FormBuilder = function FormBuilder(element, options) {\n\n    var defaults = {\n      dataType: 'json', // xml or json\n      // Uneditable fields or other content you would like to\n      // appear before and after regular fields.\n      disableFields: {\n        // before: '<h2>Header</h2>',\n        // after: '<h3>Footer</h3>'\n      },\n      // array of objects with fields values\n      // ex:\n      // defaultFields: [{\n      //   label: 'First Name',\n      //   name: 'first-name',\n      //   required: 'true',\n      //   description: 'Your first name',\n      //   type: 'text'\n      // }, {\n      //   label: 'Phone',\n      //   name: 'phone',\n      //   description: 'How can we reach you?',\n      //   type: 'text'\n      // }],\n      defaultFields: [],\n      roles: [{\n        value: 1,\n        label: 'Administrator'\n      }],\n      saveUrl: false,\n      showWarning: false,\n      serializePrefix: 'frmb',\n      labels: {\n        add: 'Add Item',\n        allowSelect: 'Allow Select',\n        autocomplete: 'Autocomplete',\n        cannotBeEmpty: 'This field cannot be empty',\n        checkboxGroup: 'Checkbox Group',\n        checkbox: 'Checkbox',\n        checkboxes: 'Checkboxes',\n        'class': 'Class',\n        clearAllMessage: 'Are you sure you want to remove all items?',\n        clearAll: 'Clear All',\n        close: 'Close',\n        copy: 'Copy To Clipboard',\n        date: 'Date Field',\n        description: 'Help Text',\n        descriptionField: 'Description',\n        devMode: 'Developer Mode',\n        disableFields: 'These fields cannot be moved.',\n        editNames: 'Edit Names',\n        editXML: 'Edit XML',\n        fieldRemoveWarning: 'Are you sure you want to remove this field?',\n        getStarted: 'Drag a field from the right to this area',\n        hide: 'Edit',\n        id: 'ID',\n        label: 'Label',\n        labelEmpty: 'Field Label cannot be empty',\n        limitRole: 'Limit access to one or more of the following roles:',\n        mandatory: 'Mandatory',\n        maxLength: 'Max Length',\n        minOptionMessage: 'This field requires a minimum of 2 options',\n        name: 'Name',\n        no: 'No',\n        off: 'Off',\n        on: 'On',\n        optional: 'optional',\n        options: 'Options',\n        optionLabelPlaceholder: 'Label',\n        optionValuePlaceholder: 'Value',\n        optionEmpty: 'Option value required',\n        paragraph: 'Paragraph',\n        preview: 'Preview',\n        radioGroup: 'Radio Group',\n        radio: 'Radio',\n        removeMessage: 'Remove Element',\n        remove: '&#215;',\n        required: 'Required',\n        roles: 'Limit Access',\n        save: 'Save Template',\n        selectOptions: 'Select Items',\n        select: 'Select',\n        selectionsMessage: 'Allow Multiple Selections',\n        text: 'Text Field',\n        textarea: 'Text Area',\n        warning: 'Warning!',\n        viewXML: 'View XML',\n        yes: 'Yes'\n      }\n    };\n\n    var opts = $.extend(true, defaults, options),\n        elem = $(element),\n        frmbID = 'frmb-' + $('ul[id^=frmb-]').length++;\n\n    opts.formID = frmbID;\n\n    var UTIL = _helpers(opts);\n    UTIL.lastID = 1;\n\n    var boxID = frmbID + '-control-box';\n\n    var formData = new Map();\n\n    function Field(fieldData) {\n      this.elem = elem;\n    }\n\n    Field.prototype.json = function () {};\n\n    var sortProperties = function sortProperties(order, fieldData) {\n      for (var prop in fieldData) {\n        if (fieldData.hasOwnProperty(prop)) {\n          order = UTIL.uniqueArray(order.concat(Object.keys(fieldData))).map(function (elem) {\n            return elem;\n          });\n        }\n      }\n      return order;\n    };\n\n    var fieldTypes = [{\n      id: 'text',\n      'class': 'icon-text'\n    }, {\n      id: 'autocomplete',\n      'class': 'icon-autocomplete'\n    }, {\n      id: 'select',\n      'class': 'icon-select'\n    }, {\n      id: 'textarea',\n      'class': 'icon-text-area'\n    }, {\n      id: 'date',\n      'class': 'icon-calendar'\n    }, {\n      id: 'radio-group',\n      'class': 'icon-radio-group'\n    }, {\n      id: 'checkbox',\n      'class': 'icon-checkbox'\n    }, {\n      id: 'checkbox-group',\n      'class': 'icon-checkbox-group'\n    }];\n\n    // Create draggable fields for formBuilder\n    var cbUL = $('<ul/>', {\n      id: boxID,\n      'class': 'frmb-control'\n    });\n\n    // Setup the input fields\n    var frmbFields = fieldTypes.map(function (elem) {\n\n      // be sure elem.id is converted to camelCase to get label\n      var fieldLabel = elem.id.toCamelCase(),\n          idName = UTIL.nameAttr(elem.id),\n          fieldData = {\n        meta: {\n          description: '',\n          roles: opts.roles,\n          label: opts.labels[fieldLabel]\n        },\n        attrs: {\n          type: elem.id,\n          name: idName,\n          'class': elem['class'],\n          required: false,\n          id: idName\n        }\n      };\n\n      if ($.inArray(elem.id, ['select', 'checkbox-group', 'radio-group']) !== -1) {\n        fieldData.options = [{\n          selected: false,\n          value: 'option-1-value',\n          label: 'Option 1 Label'\n        }, {\n          selected: false,\n          value: 'option-2-value',\n          label: 'Option 2 Label'\n        }];\n      }\n\n      fieldData.property = new Properties(UTIL, opts, fieldData);\n\n      return $('<li/>', fieldData.attrs).data('fieldData', fieldData).html(fieldData.meta.label).removeAttr('type');\n    });\n\n    cbUL.append(frmbFields);\n\n    // Build our headers and action links\n    var viewXML = $('<a/>', {\n      id: frmbID + '-export-xml',\n      text: opts.labels.viewXML,\n      'class': 'view-xml'\n    }),\n        allowSelect = $('<a/>', {\n      id: frmbID + '-allow-select',\n      text: opts.labels.allowSelect,\n      'class': 'allow-select'\n    }).prop('checked', 'checked'),\n        editXML = $('<a/>', {\n      id: frmbID + '-edit-xml',\n      text: opts.labels.editXML,\n      'class': 'edit-xml'\n    }),\n        editNames = $('<a/>', {\n      id: frmbID + '-edit-names',\n      text: opts.labels.editNames,\n      'class': 'edit-names'\n    }),\n        clearAll = $('<button/>', {\n      text: opts.labels.clearAll,\n      'class': 'clear-all btn btn-default'\n    }),\n        saveBtn = $('<button/>', {\n      id: frmbID + '-save',\n      text: opts.labels.save,\n      'class': 'save btn btn-primary'\n    }),\n        formActions = $('<div/>', {\n      id: frmbID + '-actions',\n      'class': 'form-actions btn-group'\n    }),\n        actionLinksInner = $('<div/>', {\n      id: frmbID + '-action-links-inner',\n      'class': 'action-links-inner'\n    }).append(editXML, ' | ', editNames, ' | ', allowSelect, ' | ', clearAll, ' |&nbsp;'),\n        devMode = $('<span/>', {\n      'class': 'dev-mode-link'\n    }).html(opts.labels.devMode + ' ' + opts.labels.off),\n        actionLinks = $('<div/>', {\n      id: frmbID + '-action-links',\n      'class': 'action-links'\n    }).append(actionLinksInner, devMode);\n\n    formActions.append(clearAll, saveBtn);\n\n    // Sortable fields\n    var $sortableFields = $('<ul/>').attr('id', frmbID).addClass('frmb').sortable({\n      cursor: 'move',\n      opacity: 0.9,\n      beforeStop: function beforeStop(event, ui) {\n        event = event;\n        var lastIndex = $('> li', $sortableFields).length - 1,\n            curIndex = ui.placeholder.index();\n        UTIL.doCancel = curIndex <= 1 || curIndex === lastIndex;\n      },\n      over: function over(event) {\n        $(event.target).parent().addClass('active');\n      },\n      start: UTIL.startDrag,\n      stop: UTIL.stopDrag,\n      cancel: 'input, .disabled, .sortable-options, .add, .btn, .no-drag, .prev-holder select',\n      placeholder: 'frmb-placeholder'\n    });\n\n    // ControlBox with different fields\n    cbUL.sortable({\n      helper: 'clone',\n      opacity: 0.9,\n      connectWith: $sortableFields,\n      cursor: 'move',\n      placeholder: 'ui-state-highlight',\n      start: UTIL.startDrag,\n      stop: UTIL.stopDrag,\n      revert: 150,\n      remove: function remove(event, ui) {\n        if (UTIL.startIndex === 0) {\n          cbUL.prepend(ui.item);\n        } else {\n          $('li:eq(' + (UTIL.startIndex - 1) + ')', cbUL).after(ui.item);\n        }\n      },\n      update: function update(event, ui) {\n        elem.stopIndex = $('li', $sortableFields).index(ui.item) === 0 ? '0' : $('li', $sortableFields).index(ui.item);\n        if ($('li', $sortableFields).index(ui.item) < 0) {\n          $(this).sortable('cancel');\n        } else {\n          prepFieldVars(ui.item, true);\n        }\n      },\n      receive: function receive(event, ui) {\n        if (ui.sender.hasClass('frmb') || ui.sender.hasClass('frmb-control')) {\n          $(ui.sender).sortable('cancel');\n        }\n      }\n    });\n\n    // Replace the textarea with sortable list.\n    elem.before($sortableFields).parent().addClass('frmb-wrap').append(actionLinks, viewXML);\n\n    var cbWrap = $('<div/>', {\n      id: frmbID + '-cb-wrap',\n      'class': 'cb-wrap'\n    }).append(cbUL, formActions);\n\n    var $formWrap = $('.frmb-wrap').before(cbWrap).append(actionLinks);\n\n    var doSave = function doSave() {\n      if ($(this).parents('li.disabled').length === 0) {\n        if ($(this).name === 'label' && $(this).val() === '') {\n          return alert('Error: ' + opts.labels.labelEmpty);\n        }\n        UTIL.save();\n      }\n    };\n\n    // Not pretty but we need to save a lot so users don't have to keep clicking a save button\n    $('input, select', $sortableFields).on('change', doSave);\n    $('input, select', $sortableFields).on('blur', doSave);\n\n    // Parse saved XML template data\n    elem.getTemplate = function () {\n      var xml = elem.val() !== '' ? $.parseXML(elem.val()) : false,\n          fields = $(xml).find('field');\n      if (fields.length > 0) {\n        fields.each(function () {\n          prepFieldVars($(this));\n        });\n      } else if (!xml) {\n        // Load default fields if none are set\n        if (opts.defaultFields.length) {\n          for (var i = opts.defaultFields.length - 1; i >= 0; i--) {\n            appendField(opts.defaultFields[i]);\n          }\n        } else {\n          $formWrap.addClass('empty').attr('data-content', opts.labels.getStarted);\n        }\n        disabledBeforeAfter();\n      }\n    };\n\n    var disabledBeforeAfter = function disabledBeforeAfter() {\n      var li = '<li class=\"disabled __POSITION__\">__CONTENT__</li>';\n      if (opts.disableFields.before && !$('.disabled.before', $sortableFields).length) {\n        $sortableFields.prepend(li.replace('__POSITION__', 'before').replace('__CONTENT__', opts.disableFields.before));\n      }\n      if (opts.disableFields.after && !$('.disabled.after', $sortableFields).length) {\n        $sortableFields.append(li.replace('__POSITION__', 'after').replace('__CONTENT__', opts.disableFields.after));\n      }\n    };\n\n    var prepFieldVars = function prepFieldVars($field) {\n      var fieldData = $field.data('fieldData');\n      appendField(fieldData);\n      $formWrap.removeClass('empty');\n      disabledBeforeAfter();\n    };\n\n    /**\r\n     * Append our field to the stage\r\n     * @param  {object} fieldData\r\n     * @return {string}           markup for our field, includes properties and preview\r\n     */\n    var appendField = function appendField(fieldData) {\n      var li = '',\n          delBtn = UTIL.markup('a', {\n        'class': 'del-button btn',\n        title: opts.labels.removeMessage,\n        id: 'del_' + UTIL.lastID\n      }, opts.labels.remove),\n          toggleBtn = UTIL.markup('a', {\n        id: 'frm-' + UTIL.lastID,\n        'class': 'toggle-form btn icon-pencil',\n        title: opts.labels.hide\n      }),\n          required = UTIL.markup('span', {\n        'class': 'required-asterisk'\n      }, '*'),\n          tooltip = fieldData.description ? UTIL.markup('span', {\n        'class': 'tooltip-element',\n        tooltip: fieldData.description\n      }, '?') : '',\n          fieldLabel = UTIL.markup('div', {\n        'class': 'field-label'\n      }, [fieldData.label, required, tooltip]),\n          fieldActions = UTIL.markup('div', {\n        'class': 'field-actions'\n      }, [toggleBtn, delBtn]);\n\n      var liContent = UTIL.markup('div', {\n        'class': 'field-properties'\n      }, fieldSettings(fieldData));\n\n      li = UTIL.markup('li', {\n        // id: 'frm-' + UTIL.lastID + '-item',\n        id: UTIL.nameAttr(fieldData.attrs.type),\n        'data-type': fieldData.attrs.type,\n        'class': fieldData.attrs.type + ' form-field'\n      }, [fieldActions, fieldLabel, fieldPreview(fieldData), liContent]);\n\n      if (elem.stopIndex) {\n        $('li', $sortableFields).eq(elem.stopIndex).after(li);\n      } else {\n        $sortableFields.append(li);\n      }\n\n      $(document.getElementById('frm-' + UTIL.lastID + '-item')).hide().slideDown(250);\n\n      UTIL.lastID++;\n\n      // let curFieldData = JSON.stringify(fieldData);\n      // formData.set(fieldData.attrs.id, curFieldData);\n      UTIL.save();\n    };\n\n    var fieldSettings = function fieldSettings(fieldData) {\n      var markup = [],\n          propOrder = fieldData.propOrder,\n          propertyMarkup = undefined;\n      for (var section in propOrder) {\n        if (fieldData.hasOwnProperty(section)) {\n          propertyMarkup = fieldProperties(propOrder[section], fieldData[section]).join('');\n          markup.push(propertyMarkup);\n        }\n      }\n\n      return markup.join('');\n    };\n\n    /**\r\n     * Build the editable properties for the field\r\n     * @param  {object} fieldData configuration object for field\r\n     * @return {string}        markup for advanced fields\r\n     */\n    var fieldProperties = function fieldProperties(order, properties) {\n      // console.log(order, properties);\n      return order.map(function (property) {\n\n        var fieldMarkup = fieldSetting(properties[property]);\n        var field = UTIL.markup('div', {\n          'class': 'field-property ' + property + '-wrap'\n        }, fieldMarkup);\n        return field;\n      });\n    };\n\n    var fieldSetting = function fieldSetting(property) {\n      var depth = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      var name = property.name || '',\n          propertyId = (name + '-' + UTIL.lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\n          label = property.label || opts.labels[name.toCamelCase()] || false,\n          fields = property.fields || [],\n          type = property.type || 'text',\n          value = property.value || '',\n          setting = [];\n\n      if (name === 'required') {\n        type = 'checkbox';\n      }\n\n      if (property.options) {\n        depth++;\n        fields = property.options.map(function (val) {\n          return fieldSetting(val, depth);\n        });\n\n        fields = UTIL.markup('div', {\n          'class': 'property-options-' + depth\n        }, fields);\n      }\n\n      if ('none' !== type) {\n\n        var attrs = {\n          type: type,\n          name: propertyId,\n          value: value,\n          id: propertyId,\n          'class': 'edit-' + name\n        };\n\n        if (depth === 2) {\n          attrs.placeholder = label.charAt(0).toUpperCase() + label.slice(1);\n        } else if (depth === 1) {\n          setTimeout(function () {\n            $('.property-options-1', document.getElementById('frm-' + UTIL.lastID + '-item')).sortable();\n          }, 1000);\n        }\n\n        setting.push(UTIL.markup('input', attrs));\n      }\n\n      if (label) {\n        setting.push(UTIL.markup('label', {\n          'for': propertyId\n        }, label));\n      }\n\n      setting.push(setting, fields);\n\n      return setting.join('');\n    };\n\n    /**\r\n     * Generate preview markup\r\n     * @param  {object} attrs\r\n     * @return {string}       preview markup for field\r\n     */\n    var fieldPreview = function fieldPreview(fieldData) {\n\n      delete fieldData.attrs['class'];\n\n      var field = {},\n          type = fieldData.attrs.type.toCamelCase();\n\n      field.text = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs),\n            field = '<input ' + fieldAttrs + '>',\n            value = fieldData.attrs.value || '',\n            fieldLabel = '<label for=\"' + fieldData.attrs.id + '\">' + fieldData.label + '</label>',\n            templates = {};\n\n        templates.text = fieldLabel + field;\n        templates.password = templates.text;\n        templates.autocomplete = templates.text;\n        templates.date = templates.text;\n\n        return templates[fieldData.attrs.type];\n      };\n\n      field.password = Object.assign(field.text);\n      field.email = field.text;\n      field.date = field.text;\n      field.autocomplete = field.text;\n\n      field.textarea = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs),\n            value = fieldData.attrs.value || '',\n            textArea = '<textarea ' + fieldAttrs + '>' + value + '</textarea>',\n            fieldLabel = '<label for=\"' + fieldData.attrs.id + '\">' + fieldData.label + '</label>';\n\n        return fieldLabel + textArea;\n      };\n\n      field.checkbox = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs);\n        return '<label for=\"' + fieldData.attrs.id + '\"><input ' + fieldAttrs + '> ' + fieldData.label + '</label>';\n      };\n\n      field.radio = field.checkbox;\n\n      field.select = function (fieldData) {\n        var options = undefined,\n            attrs = fieldData.attrs,\n            option = function option(opt) {\n          var selected = opt.selected ? 'selected' : '';\n          return '<option value=\"' + opt.value + '\" ' + selected + '>' + opt.label + '</option>';\n        },\n            i = undefined;\n        fieldData.options.reverse();\n        for (i = fieldData.options.length - 1; i >= 0; i--) {\n          options += option(fieldData.options[i]);\n        }\n        return '<' + attrs.type + '>' + options + '</' + attrs.type + '>';\n      };\n\n      field.checkboxGroup = function (fieldData) {\n        var preview = [],\n            checkbox = Object.assign({}, fieldData);\n        checkbox.attrs.type = checkbox.attrs.type.replace('-group', '');\n        checkbox.attrs.name = checkbox.attrs.name + '[]';\n        delete checkbox.options;\n        fieldData.options.forEach(function (option) {\n          checkbox.label = option.label;\n          checkbox.attrs.value = option.value;\n          preview.push(field[checkbox.attrs.type](checkbox));\n        });\n\n        return preview.join('');\n      };\n\n      field.radioGroup = field.checkboxGroup;\n      return '<div class=\"prev-holder\">' + field[type](fieldData) + '</div>';\n    };\n\n    // ---------------------- UTILITIES ---------------------- //\n\n    // delete options\n    $sortableFields.on('click', '.remove', function (e) {\n      e.preventDefault();\n      var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\n      if (optionsCount <= 2) {\n        alert('Error: ' + opts.labels.minOptionMessage);\n      } else {\n        $(this).parent('li').slideUp('250', function () {\n          $(this).remove();\n        });\n      }\n    });\n\n    // toggle fields\n    $sortableFields.on('click', '.toggle-form', function (e) {\n      e.preventDefault();\n      var $field = $(this).parents('.form-field:eq(0)');\n      $field.toggleClass('editing');\n      $('.prev-holder', $field).slideToggle(250);\n      $('.field-properties', $field).slideToggle(250, function () {\n        // do something after attr toggle\n      });\n    });\n\n    // update preview to label\n    $sortableFields.on('keyup', '.edit-label', function (e) {\n      $('.field-label', $(this).closest('li')).html($(this).val());\n    });\n\n    // remove error styling when users tries to correct mistake\n    $sortableFields.on('keyup', 'input.error', function () {\n      $(this).removeClass('error');\n    });\n\n    $sortableFields.on('keyup', '.edit-description', function (e) {\n      e.preventDefault();\n      var closestToolTip = $('.tooltip-element', $(this).closest('li'));\n      if ($(this).val() !== '') {\n        if (!closestToolTip.length) {\n          var tt = '<span class=\"tooltip-element\" tooltip=\"' + $(this).val() + '\">?</span>';\n          $('.field-label', $(this).closest('li')).append(tt);\n          // UTIL.initTooltip(tt);\n        } else {\n            closestToolTip.attr('tooltip', $(this).val()).css('display', 'inline-block');\n          }\n      } else {\n        if (closestToolTip.length) {\n          closestToolTip.css('display', 'none');\n        }\n      }\n    });\n\n    // format name attribute\n    $sortableFields.on('keyup', '.edit-name', function () {\n      $(this).val(UTIL.safename($(this).val()));\n      if ($(this).val() === '') {\n        $(this).addClass('field_error').attr('placeholder', opts.labels.cannotBeEmpty);\n      } else {\n        $(this).removeClass('field_error');\n      }\n    });\n\n    $sortableFields.on('keyup', 'input.fld-max-length', function () {\n      $(this).val(UTIL.forceNumber($(this).val()));\n    });\n\n    // Delete field\n    $sortableFields.on('click', '.del-button', function (e) {\n      e.preventDefault();\n\n      var $field = $(this).parents('.form-field:eq(0)');\n\n      if (opts.showWarning || true) {\n        // double check that the user really wants to remove the field\n        showRemoveWarning($field);\n      } else {\n        UTIL.removeField($field);\n      }\n    });\n\n    var showRemoveWarning = function showRemoveWarning($field) {\n      $('<div />', {\n        title: opts.labels.warning\n      }).append(opts.labels.fieldRemoveWarning).dialog({\n        modal: true,\n        resizable: false,\n        dialogClass: 'ite-warning',\n        buttons: [{\n          text: opts.labels.yes,\n          click: function click() {\n            UTIL.removeField($field);\n            $(this).dialog('close');\n          }\n        }, {\n          text: opts.labels.no,\n          click: function click() {\n            $(this).dialog('close');\n          }\n        }]\n      }, opts.labels.warning);\n    };\n\n    // Attach a callback to toggle required asterisk\n    $sortableFields.on('click', '.edit-required', function () {\n      var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\n      requiredAsterisk.toggle();\n    });\n\n    // Attach a callback to toggle roles visibility\n    $sortableFields.on('click', '.edit-roles', function () {\n      var roles = $(this).siblings('.property-options-1'),\n          enableRolesCB = $(this);\n      roles.slideToggle(250, function () {\n        if (!enableRolesCB.is(':checked')) {\n          $('input[type=\"checkbox\"]', roles).removeAttr('checked');\n        }\n      });\n    });\n\n    $sortableFields.on('mouseenter', 'li.disabled .form-element', function () {\n      UTIL.disabledTT($(this));\n    });\n\n    // Attach a callback to close link\n    $sortableFields.on('click', '.close-field', function (e) {\n      e.preventDefault();\n      $(this).parents('li.form-field').find('.toggle-form').trigger('click');\n    });\n\n    $sortableFields.on('hover', '.del-button', function (e) {\n      console.log('hovering!!');\n      var $field = $(this).parents('.form-field:eq(0)');\n      $field.toggleClass('delete');\n    });\n\n    // View XML\n    $(document.getElementById(frmbID + '-export-xml')).click(function (e) {\n      e.preventDefault();\n      var xml = elem.val(),\n          $pre = $('<pre />').text(xml);\n      $pre.dialog({\n        resizable: false,\n        modal: true,\n        width: 720,\n        dialogClass: 'frmb-xml',\n        overlay: {\n          color: '#333333'\n        }\n      });\n    });\n\n    // Clear all fields in form editor\n    // @todo refactor, this no longer accounts for new data model\n    clearAll.click(function (e) {\n      e.preventDefault();\n      if (window.confirm(opts.labels.clearAllMessage)) {\n        $sortableFields.empty();\n        elem.val('');\n        UTIL.save();\n        elem.getTemplate();\n      }\n    });\n\n    clearAll.hover(function () {\n      $(this).toggleClass('btn-danger').toggleClass('btn-default');\n    });\n\n    // Save Idea Template\n    $(document.getElementById(frmbID + '-save')).click(function (e) {\n      e.preventDefault();\n      if (!$formWrap.hasClass('edit-xml')) {\n        UTIL.save();\n      }\n      UTIL.validateForm(e);\n    });\n\n    var triggerDevMode = false,\n        keys = [],\n        devCode = '68,69,86';\n    // Super secret Developer Tools\n    $('.save.btn').mouseover(function () {\n      triggerDevMode = true;\n    }).mouseout(function () {\n      triggerDevMode = false;\n    });\n    $(document.documentElement).keydown(function (e) {\n      keys.push(e.keyCode);\n      if (keys.toString().indexOf(devCode) >= 0) {\n        $('.action-links').toggle();\n        $('.view-xml').toggle();\n        keys = [];\n      }\n    });\n    // Toggle Developer Mode\n    $('.dev-mode-link').click(function (e) {\n      e.preventDefault();\n      var dml = $(this);\n      $formWrap.toggleClass('dev-mode');\n      dml.parent().css('opacity', 1);\n      if ($formWrap.hasClass('dev-mode')) {\n        dml.siblings('.action-links-inner').css('width', '100%');\n        dml.html(opts.labels.devMode + ' ' + opts.labels.on).css('color', '#8CC63F');\n      } else {\n        dml.siblings('.action-links-inner').css('width', 0);\n        dml.html(opts.labels.devMode + ' ' + opts.labels.off).css('color', '#666666');\n        triggerDevMode = false;\n        $('.action-links').toggle();\n        $('.view-xml').toggle();\n      }\n    });\n\n    // Toggle Edit Names\n    $(document.getElementById(frmbID + '-edit-names')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('.name_wrap', $sortableFields).slideToggle(250, function () {\n        $formWrap.toggleClass('edit-names');\n      });\n    });\n\n    // Toggle Allow Select\n    $(document.getElementById(frmbID + '-allow-select')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('.allow-multi, .select-option', $sortableFields).slideToggle(250, function () {\n        $formWrap.toggleClass('allow-select');\n      });\n    });\n\n    // Toggle Edit XML\n    $(document.getElementById(frmbID + '-edit-xml')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('textarea.idea-template').show();\n      $('.template-textarea-wrap').slideToggle(250);\n      $formWrap.toggleClass('edit-xml');\n    });\n\n    $formWrap.css('min-height', cbUL.height() - 48);\n    elem.wrap('<div class=\"template-textarea-wrap\"/>').getTemplate();\n  };\n\n  $.fn.formBuilder = function (options) {\n    var form = this;\n    return form.each(function () {\n      var element = $(this),\n          formBuilder;\n      if (element.data('formBuilder')) {\n        var existingFormBuilder = element.parents('.form-builder:eq(0)');\n        var newElement = element.clone();\n        existingFormBuilder.before(newElement);\n        existingFormBuilder.remove();\n        formBuilder = new FormBuilder(newElement, options);\n        newElement.data('formBuilder', formBuilder);\n      } else {\n        formBuilder = new FormBuilder(form, options);\n        element.data('formBuilder', formBuilder);\n      }\n    });\n  };\n})(jQuery);","var _helpers = function(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n  $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = (arrArg) => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function(event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function(event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function(str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function(str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function(tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function() {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function() {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function() {\n\n    let $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function(field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function(type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function(value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function(value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function() {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function() {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n          fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function() {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function() {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function(field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function() {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function() {\n    return this.replace(/(\\-\\w)/g, function(matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function(type, attrs = {}, content = '') {\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    let inlineElems = ['input'],\n      template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n    return template;\n  };\n\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function(attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function($field) {\n    $field.slideUp(250, function() {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n","var Properties = function(UTIL, opts, fieldData) {\n  'use strict';\n\n  var properties = this,\n    _utils = {};\n\n\n  properties.order = {\n    meta: ['label', 'description', 'roles'],\n    attrs: ['required', 'name', 'class']\n  };\n\n  properties.roles = function() {\n    let roles = {\n      value: 1,\n      type: 'checkbox'\n    };\n\n    roles.options = fieldData.meta.roles.map(function(elem) {\n      elem.type = 'checkbox';\n      return elem;\n    });\n  };\n\n\n  // if field type is not checkbox, checkbox/radio group or select list, add max length\n  if ($.inArray(fieldData.type, ['checkbox', 'select', 'checkbox-group', 'date', 'autocomplete']) === -1 && !fieldData.attrs.maxLength) {\n    fieldData.attrs.maxLength = '';\n    properties.order.attrs.push('maxLength');\n  }\n\n  // options need a field for value, label and checkbox to select\n  if (fieldData.options) {\n    let optionFields = fieldData.options.map(function(elem, index) {\n      let option = {\n        options: [],\n        type: 'none'\n      };\n      for (var prop in elem) {\n        if (elem.hasOwnProperty(prop)) {\n          let field = {\n            value: elem[prop],\n            label: prop,\n            name: 'option-' + prop\n          };\n          if ('selected' === prop) {\n            field.type = 'checkbox';\n          }\n          option.options.push(field);\n        }\n      }\n      return option;\n    });\n\n    fieldData.options = {\n      options: optionFields,\n      label: opts.labels.options,\n      type: 'none'\n    };\n  }\n\n\n  _utils.field = function(propName, propValue) {\n    let defaultProp = {\n        name: UTIL.nameAttr(propName),\n        id: (propName + '-' + UTIL.lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\n        label: opts.labels[name.toCamelCase()],\n        fields: [],\n        type: _utils.propMap('type', propName),\n        value: ''\n      },\n      property;\n    if (typeof propValue === 'object') {\n      property = $.extend(defaultProp, propValue);\n    } else {\n      property = $.extend({}, defaultProp);\n    }\n\n    return property;\n  };\n\n  _utils.propMap = function(type, name) {\n    let propMap = new Map(),\n      propType = {\n        required: 'checkbox',\n        roles: 'checkbox'\n      };\n    propMap.set('type', propType);\n\n    return propMap.get(type)[name] || 'text';\n\n  };\n\n  _utils.fields = (function getFields(fieldData) {\n    fieldData.fields = {};\n\n    for (var prop in fieldData) {\n      if (fieldData.hasOwnProperty(prop)) {\n        fieldData.fields[prop] = [];\n        if (typeof fieldData[prop] === 'object') {\n          return getFields(fieldData[prop]);\n        } else {\n          let field = _utils.field(prop, fieldData[prop]);\n          fieldData.fields[prop].push(field);\n        }\n      }\n    }\n\n    return fieldData.fields;\n  })(fieldData);\n\n  return properties;\n};\n","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","(function($) {\n  'use strict';\n  $.fn.toXML = function(options) {\n    var defaults = {\n      prepend: '',\n      attributes: ['class']\n    };\n    var opts = $.extend(defaults, options);\n\n    var serialStr = '';\n\n    // Begin the core plugin\n    this.each(function() {\n      var liCount = 0;\n      var c = 1;\n\n      if ($(this).children().length >= 1) {\n        serialStr += '<form-template>\\n\\t<fields>';\n\n        // build new xml\n        $(this).children().each(function() {\n          var $field = $(this);\n          if (!($field.hasClass('moving') || $field.hasClass('disabled'))) {\n            for (var att = 0; att < opts.attributes.length; att++) {\n              var required = $('input.required', $field).is(':checked') ? 'required=\"true\" ' : 'required=\"false\" ',\n                multipleChecked = $('input[name=\"multiple\"]', $field).is(':checked'),\n                multiple = multipleChecked ? 'style=\"multiple\" ' : '',\n                t = $field.attr(opts.attributes[att]).replace(' form-field', ''), // field type\n                multipleField = t.match(/(select|checkbox-group|radio-group)/),\n                type = 'type=\"' + t + '\" ',\n                fName = 'name=\"' + $('input.fld-name', $field).val() + '\" ',\n                fLabel = 'label=\"' + $('input.fld-label', $field).val() + '\" ',\n                roleVals = $.map($('input.roles-field:checked', $field), function(n) {\n                  return n.value;\n                }).join(','),\n                roles = (roleVals !== '' ? 'role=\"' + roleVals + '\" ' : ''),\n                desc = 'description=\"' + $('input.fld-description', $field).val() + '\" ',\n                maxLengthVal = $('input.fld-max-length', $field).val(),\n                maxLength = 'max-length=\"' + (maxLengthVal !== undefined ? maxLengthVal : '') + '\" ',\n                fSlash = (!multipleField ? '/' : '');\n\n              var fToggle = $('.checkbox-toggle', $field).is(':checked') ? 'toggle=\"true\" ' : '';\n\n              serialStr += '\\n\\t\\t<field ' + fName + fLabel + fToggle + multiple + roles + desc + (maxLengthVal !== '' ? (maxLengthVal !== undefined ? maxLength : '') : '') + required + type + fSlash + '>';\n              if (multipleField) {\n                c = 1;\n                $('.sortable-options li', $field).each(function() {\n                  let $option = $(this),\n                    optionValue = 'value=\"' + $('.option-value', $option).val() + '\"',\n                    optionLabel = $('.option-label', $option).val(),\n                    selected = $('.select-option', $option).is(':checked') ? ' selected=\"true\"' : '';\n                  serialStr += '\\n\\t\\t\\t<option' + selected + ' ' + optionValue + '>' + optionLabel + '</option>';\n                  c++;\n                });\n                serialStr += '\\n\\t\\t</field>';\n              }\n            }\n          }\n          liCount++;\n        });\n        serialStr += '\\n\\t</fields>\\n</form-template>';\n      } // if \"$(this).children().length >= 1\"\n\n    });\n    return (serialStr);\n  };\n})(jQuery);\n","(function($) {\r\n  'use strict';\r\n  var FormBuilder = function(element, options) {\r\n\r\n    var defaults = {\r\n      dataType: 'json', // xml or json\r\n      // Uneditable fields or other content you would like to\r\n      // appear before and after regular fields.\r\n      disableFields: {\r\n        // before: '<h2>Header</h2>',\r\n        // after: '<h3>Footer</h3>'\r\n      },\r\n      // array of objects with fields values\r\n      // ex:\r\n      // defaultFields: [{\r\n      //   label: 'First Name',\r\n      //   name: 'first-name',\r\n      //   required: 'true',\r\n      //   description: 'Your first name',\r\n      //   type: 'text'\r\n      // }, {\r\n      //   label: 'Phone',\r\n      //   name: 'phone',\r\n      //   description: 'How can we reach you?',\r\n      //   type: 'text'\r\n      // }],\r\n      defaultFields: [],\r\n      roles: [{\r\n        value: 1,\r\n        label: 'Administrator'\r\n      }],\r\n      saveUrl: false,\r\n      showWarning: false,\r\n      serializePrefix: 'frmb',\r\n      labels: {\r\n        add: 'Add Item',\r\n        allowSelect: 'Allow Select',\r\n        autocomplete: 'Autocomplete',\r\n        cannotBeEmpty: 'This field cannot be empty',\r\n        checkboxGroup: 'Checkbox Group',\r\n        checkbox: 'Checkbox',\r\n        checkboxes: 'Checkboxes',\r\n        'class': 'Class',\r\n        clearAllMessage: 'Are you sure you want to remove all items?',\r\n        clearAll: 'Clear All',\r\n        close: 'Close',\r\n        copy: 'Copy To Clipboard',\r\n        date: 'Date Field',\r\n        description: 'Help Text',\r\n        descriptionField: 'Description',\r\n        devMode: 'Developer Mode',\r\n        disableFields: 'These fields cannot be moved.',\r\n        editNames: 'Edit Names',\r\n        editXML: 'Edit XML',\r\n        fieldRemoveWarning: 'Are you sure you want to remove this field?',\r\n        getStarted: 'Drag a field from the right to this area',\r\n        hide: 'Edit',\r\n        id: 'ID',\r\n        label: 'Label',\r\n        labelEmpty: 'Field Label cannot be empty',\r\n        limitRole: 'Limit access to one or more of the following roles:',\r\n        mandatory: 'Mandatory',\r\n        maxLength: 'Max Length',\r\n        minOptionMessage: 'This field requires a minimum of 2 options',\r\n        name: 'Name',\r\n        no: 'No',\r\n        off: 'Off',\r\n        on: 'On',\r\n        optional: 'optional',\r\n        options: 'Options',\r\n        optionLabelPlaceholder: 'Label',\r\n        optionValuePlaceholder: 'Value',\r\n        optionEmpty: 'Option value required',\r\n        paragraph: 'Paragraph',\r\n        preview: 'Preview',\r\n        radioGroup: 'Radio Group',\r\n        radio: 'Radio',\r\n        removeMessage: 'Remove Element',\r\n        remove: '&#215;',\r\n        required: 'Required',\r\n        roles: 'Limit Access',\r\n        save: 'Save Template',\r\n        selectOptions: 'Select Items',\r\n        select: 'Select',\r\n        selectionsMessage: 'Allow Multiple Selections',\r\n        text: 'Text Field',\r\n        textarea: 'Text Area',\r\n        warning: 'Warning!',\r\n        viewXML: 'View XML',\r\n        yes: 'Yes'\r\n      }\r\n    };\r\n\r\n\r\n    var opts = $.extend(true, defaults, options),\r\n      elem = $(element),\r\n      frmbID = 'frmb-' + $('ul[id^=frmb-]').length++;\r\n\r\n\r\n    opts.formID = frmbID;\r\n\r\n\r\n    var UTIL = _helpers(opts);\r\n    UTIL.lastID = 1;\r\n\r\n    var boxID = frmbID + '-control-box';\r\n\r\n    var formData = new Map();\r\n\r\n\r\n    function Field(fieldData) {\r\n      this.elem = elem;\r\n    }\r\n\r\n    Field.prototype.json = () => {\r\n\r\n    };\r\n\r\n\r\n    var sortProperties = function(order, fieldData) {\r\n      for (var prop in fieldData) {\r\n        if (fieldData.hasOwnProperty(prop)) {\r\n          order = UTIL.uniqueArray(order.concat(Object.keys(fieldData))).map(function(elem) {\r\n            return elem;\r\n          });\r\n        }\r\n      }\r\n      return order;\r\n    };\r\n\r\n\r\n\r\n    var fieldTypes = [{\r\n      id: 'text',\r\n      class: 'icon-text'\r\n    }, {\r\n      id: 'autocomplete',\r\n      class: 'icon-autocomplete'\r\n    }, {\r\n      id: 'select',\r\n      class: 'icon-select'\r\n    }, {\r\n      id: 'textarea',\r\n      class: 'icon-text-area'\r\n    }, {\r\n      id: 'date',\r\n      class: 'icon-calendar'\r\n    }, {\r\n      id: 'radio-group',\r\n      class: 'icon-radio-group'\r\n    }, {\r\n      id: 'checkbox',\r\n      class: 'icon-checkbox'\r\n    }, {\r\n      id: 'checkbox-group',\r\n      class: 'icon-checkbox-group'\r\n    }];\r\n\r\n    // Create draggable fields for formBuilder\r\n    var cbUL = $('<ul/>', {\r\n      id: boxID,\r\n      'class': 'frmb-control'\r\n    });\r\n\r\n    // Setup the input fields\r\n    var frmbFields = fieldTypes.map(function(elem) {\r\n\r\n      // be sure elem.id is converted to camelCase to get label\r\n      let fieldLabel = elem.id.toCamelCase(),\r\n        idName = UTIL.nameAttr(elem.id),\r\n        fieldData = {\r\n          meta: {\r\n            description: '',\r\n            roles: opts.roles,\r\n            label: opts.labels[fieldLabel]\r\n          },\r\n          attrs: {\r\n            type: elem.id,\r\n            name: idName,\r\n            'class': elem.class,\r\n            required: false,\r\n            id: idName\r\n          }\r\n        };\r\n\r\n      if ($.inArray(elem.id, ['select', 'checkbox-group', 'radio-group']) !== -1) {\r\n        fieldData.options = [{\r\n          selected: false,\r\n          value: 'option-1-value',\r\n          label: 'Option 1 Label'\r\n        }, {\r\n          selected: false,\r\n          value: 'option-2-value',\r\n          label: 'Option 2 Label'\r\n        }];\r\n      }\r\n\r\n      fieldData.property = new Properties(UTIL, opts, fieldData);\r\n\r\n      return $('<li/>', fieldData.attrs)\r\n        .data('fieldData', fieldData)\r\n        .html(fieldData.meta.label)\r\n        .removeAttr('type');\r\n    });\r\n\r\n    cbUL.append(frmbFields);\r\n\r\n    // Build our headers and action links\r\n    var viewXML = $('<a/>', {\r\n        id: frmbID + '-export-xml',\r\n        text: opts.labels.viewXML,\r\n        'class': 'view-xml'\r\n      }),\r\n      allowSelect = $('<a/>', {\r\n        id: frmbID + '-allow-select',\r\n        text: opts.labels.allowSelect,\r\n        'class': 'allow-select'\r\n      }).prop('checked', 'checked'),\r\n      editXML = $('<a/>', {\r\n        id: frmbID + '-edit-xml',\r\n        text: opts.labels.editXML,\r\n        'class': 'edit-xml'\r\n      }),\r\n      editNames = $('<a/>', {\r\n        id: frmbID + '-edit-names',\r\n        text: opts.labels.editNames,\r\n        'class': 'edit-names'\r\n      }),\r\n      clearAll = $('<button/>', {\r\n        text: opts.labels.clearAll,\r\n        'class': 'clear-all btn btn-default'\r\n      }),\r\n      saveBtn = $('<button/>', {\r\n        id: frmbID + '-save',\r\n        text: opts.labels.save,\r\n        'class': 'save btn btn-primary'\r\n      }),\r\n      formActions = $('<div/>', {\r\n        id: frmbID + '-actions',\r\n        'class': 'form-actions btn-group'\r\n      }),\r\n      actionLinksInner = $('<div/>', {\r\n        id: frmbID + '-action-links-inner',\r\n        'class': 'action-links-inner'\r\n      }).append(editXML, ' | ', editNames, ' | ', allowSelect, ' | ', clearAll, ' |&nbsp;'),\r\n      devMode = $('<span/>', {\r\n        'class': 'dev-mode-link'\r\n      }).html(opts.labels.devMode + ' ' + opts.labels.off),\r\n      actionLinks = $('<div/>', {\r\n        id: frmbID + '-action-links',\r\n        'class': 'action-links'\r\n      }).append(actionLinksInner, devMode);\r\n\r\n    formActions.append(clearAll, saveBtn);\r\n\r\n    // Sortable fields\r\n    var $sortableFields = $('<ul/>').attr('id', frmbID).addClass('frmb').sortable({\r\n      cursor: 'move',\r\n      opacity: 0.9,\r\n      beforeStop: function(event, ui) {\r\n        event = event;\r\n        var lastIndex = $('> li', $sortableFields).length - 1,\r\n          curIndex = ui.placeholder.index();\r\n        UTIL.doCancel = ((curIndex <= 1) || (curIndex === lastIndex));\r\n      },\r\n      over: function(event) {\r\n        $(event.target).parent().addClass('active');\r\n      },\r\n      start: UTIL.startDrag,\r\n      stop: UTIL.stopDrag,\r\n      cancel: 'input, .disabled, .sortable-options, .add, .btn, .no-drag, .prev-holder select',\r\n      placeholder: 'frmb-placeholder'\r\n    });\r\n\r\n    // ControlBox with different fields\r\n    cbUL.sortable({\r\n      helper: 'clone',\r\n      opacity: 0.9,\r\n      connectWith: $sortableFields,\r\n      cursor: 'move',\r\n      placeholder: 'ui-state-highlight',\r\n      start: UTIL.startDrag,\r\n      stop: UTIL.stopDrag,\r\n      revert: 150,\r\n      remove: function(event, ui) {\r\n        if (UTIL.startIndex === 0) {\r\n          cbUL.prepend(ui.item);\r\n        } else {\r\n          $('li:eq(' + (UTIL.startIndex - 1) + ')', cbUL).after(ui.item);\r\n        }\r\n      },\r\n      update: function(event, ui) {\r\n        elem.stopIndex = ($('li', $sortableFields).index(ui.item) === 0 ? '0' : $('li', $sortableFields).index(ui.item));\r\n        if ($('li', $sortableFields).index(ui.item) < 0) {\r\n          $(this).sortable('cancel');\r\n        } else {\r\n          prepFieldVars(ui.item, true);\r\n        }\r\n      },\r\n      receive: function(event, ui) {\r\n        if (ui.sender.hasClass('frmb') || ui.sender.hasClass('frmb-control')) {\r\n          $(ui.sender).sortable('cancel');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Replace the textarea with sortable list.\r\n    elem\r\n      .before($sortableFields)\r\n      .parent()\r\n      .addClass('frmb-wrap')\r\n      .append(actionLinks, viewXML);\r\n\r\n    var cbWrap = $('<div/>', {\r\n      id: frmbID + '-cb-wrap',\r\n      'class': 'cb-wrap'\r\n    }).append(cbUL, formActions);\r\n\r\n    var $formWrap = $('.frmb-wrap').before(cbWrap).append(actionLinks);\r\n\r\n    var doSave = function() {\r\n      if ($(this).parents('li.disabled').length === 0) {\r\n        if ($(this).name === 'label' && $(this).val() === '') {\r\n          return alert('Error: ' + opts.labels.labelEmpty);\r\n        }\r\n        UTIL.save();\r\n      }\r\n    };\r\n\r\n    // Not pretty but we need to save a lot so users don't have to keep clicking a save button\r\n    $('input, select', $sortableFields).on('change', doSave);\r\n    $('input, select', $sortableFields).on('blur', doSave);\r\n\r\n    // Parse saved XML template data\r\n    elem.getTemplate = function() {\r\n      var xml = (elem.val() !== '' ? $.parseXML(elem.val()) : false),\r\n        fields = $(xml).find('field');\r\n      if (fields.length > 0) {\r\n        fields.each(function() {\r\n          prepFieldVars($(this));\r\n        });\r\n      } else if (!xml) {\r\n        // Load default fields if none are set\r\n        if (opts.defaultFields.length) {\r\n          for (var i = opts.defaultFields.length - 1; i >= 0; i--) {\r\n            appendField(opts.defaultFields[i]);\r\n          }\r\n        } else {\r\n          $formWrap.addClass('empty').attr('data-content', opts.labels.getStarted);\r\n        }\r\n        disabledBeforeAfter();\r\n      }\r\n    };\r\n\r\n    var disabledBeforeAfter = function() {\r\n      var li = '<li class=\"disabled __POSITION__\">__CONTENT__</li>';\r\n      if (opts.disableFields.before && !$('.disabled.before', $sortableFields).length) {\r\n        $sortableFields.prepend(li.replace('__POSITION__', 'before').replace('__CONTENT__', opts.disableFields.before));\r\n      }\r\n      if (opts.disableFields.after && !$('.disabled.after', $sortableFields).length) {\r\n        $sortableFields.append(li.replace('__POSITION__', 'after').replace('__CONTENT__', opts.disableFields.after));\r\n      }\r\n    };\r\n\r\n    var prepFieldVars = function($field) {\r\n      var fieldData = $field.data('fieldData');\r\n      appendField(fieldData);\r\n      $formWrap.removeClass('empty');\r\n      disabledBeforeAfter();\r\n    };\r\n\r\n    /**\r\n     * Append our field to the stage\r\n     * @param  {object} fieldData\r\n     * @return {string}           markup for our field, includes properties and preview\r\n     */\r\n    var appendField = function(fieldData) {\r\n      var li = '',\r\n        delBtn = UTIL.markup('a', {\r\n          'class': 'del-button btn',\r\n          title: opts.labels.removeMessage,\r\n          id: 'del_' + UTIL.lastID\r\n        }, opts.labels.remove),\r\n        toggleBtn = UTIL.markup('a', {\r\n          id: 'frm-' + UTIL.lastID,\r\n          'class': 'toggle-form btn icon-pencil',\r\n          title: opts.labels.hide\r\n        }),\r\n        required = UTIL.markup('span', {\r\n          'class': 'required-asterisk'\r\n        }, '*'),\r\n        tooltip = (fieldData.description ? UTIL.markup('span', {\r\n          'class': 'tooltip-element',\r\n          tooltip: fieldData.description\r\n        }, '?') : ''),\r\n        fieldLabel = UTIL.markup('div', {\r\n          'class': 'field-label'\r\n        }, [fieldData.label, required, tooltip]),\r\n        fieldActions = UTIL.markup('div', {\r\n          'class': 'field-actions'\r\n        }, [toggleBtn, delBtn]);\r\n\r\n      var liContent = UTIL.markup('div', {\r\n        'class': 'field-properties'\r\n      }, fieldSettings(fieldData));\r\n\r\n      li = UTIL.markup('li', {\r\n        // id: 'frm-' + UTIL.lastID + '-item',\r\n        id: UTIL.nameAttr(fieldData.attrs.type),\r\n        'data-type': fieldData.attrs.type,\r\n        'class': fieldData.attrs.type + ' form-field'\r\n      }, [fieldActions, fieldLabel, fieldPreview(fieldData), liContent]);\r\n\r\n      if (elem.stopIndex) {\r\n        $('li', $sortableFields).eq(elem.stopIndex).after(li);\r\n      } else {\r\n        $sortableFields.append(li);\r\n      }\r\n\r\n      $(document.getElementById('frm-' + UTIL.lastID + '-item')).hide().slideDown(250);\r\n\r\n      UTIL.lastID++;\r\n\r\n      // let curFieldData = JSON.stringify(fieldData);\r\n      // formData.set(fieldData.attrs.id, curFieldData);\r\n      UTIL.save();\r\n    };\r\n\r\n    var fieldSettings = function(fieldData) {\r\n      let markup = [],\r\n        propOrder = fieldData.propOrder,\r\n        propertyMarkup;\r\n      for (var section in propOrder) {\r\n        if (fieldData.hasOwnProperty(section)) {\r\n          propertyMarkup = fieldProperties(propOrder[section], fieldData[section]).join('');\r\n          markup.push(propertyMarkup);\r\n        }\r\n      }\r\n\r\n      return markup.join('');\r\n    };\r\n\r\n    /**\r\n     * Build the editable properties for the field\r\n     * @param  {object} fieldData configuration object for field\r\n     * @return {string}        markup for advanced fields\r\n     */\r\n    var fieldProperties = function(order, properties) {\r\n      // console.log(order, properties);\r\n      return order.map(function(property) {\r\n\r\n        let fieldMarkup = fieldSetting(properties[property]);\r\n        let field = UTIL.markup('div', {\r\n          'class': `field-property ${property}-wrap`\r\n        }, fieldMarkup);\r\n        return field;\r\n      });\r\n    };\r\n\r\n    var fieldSetting = function(property, depth = 0) {\r\n      var name = property.name || '',\r\n        propertyId = (name + '-' + UTIL.lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\r\n        label = property.label || opts.labels[name.toCamelCase()] || false,\r\n        fields = property.fields || [],\r\n        type = property.type || 'text',\r\n        value = property.value || '',\r\n        setting = [];\r\n\r\n      if (name === 'required') {\r\n        type = 'checkbox';\r\n      }\r\n\r\n      if (property.options) {\r\n        depth++;\r\n        fields = property.options.map(function(val) {\r\n          return fieldSetting(val, depth);\r\n        });\r\n\r\n        fields = UTIL.markup('div', {\r\n          'class': 'property-options-' + depth\r\n        }, fields);\r\n      }\r\n\r\n      if ('none' !== type) {\r\n\r\n        let attrs = {\r\n          type: type,\r\n          name: propertyId,\r\n          value: value,\r\n          id: propertyId,\r\n          'class': 'edit-' + name\r\n        };\r\n\r\n        if (depth === 2) {\r\n          attrs.placeholder = label.charAt(0).toUpperCase() + label.slice(1);\r\n        } else if (depth === 1) {\r\n          setTimeout(function() {\r\n            $('.property-options-1', document.getElementById('frm-' + UTIL.lastID + '-item')).sortable();\r\n          }, 1000);\r\n        }\r\n\r\n        setting.push(UTIL.markup('input', attrs));\r\n      }\r\n\r\n      if (label) {\r\n        setting.push(UTIL.markup('label', {\r\n          'for': propertyId\r\n        }, label));\r\n      }\r\n\r\n      setting.push(setting, fields);\r\n\r\n      return setting.join('');\r\n    };\r\n\r\n    /**\r\n     * Generate preview markup\r\n     * @param  {object} attrs\r\n     * @return {string}       preview markup for field\r\n     */\r\n    var fieldPreview = function(fieldData) {\r\n\r\n      delete fieldData.attrs.class;\r\n\r\n      var field = {},\r\n        type = fieldData.attrs.type.toCamelCase();\r\n\r\n      field.text = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs),\r\n          field = `<input ${fieldAttrs}>`,\r\n          value = fieldData.attrs.value || '',\r\n          fieldLabel = `<label for=\"${fieldData.attrs.id}\">${fieldData.label}</label>`,\r\n          templates = {};\r\n\r\n        templates.text = fieldLabel + field;\r\n        templates.password = templates.text;\r\n        templates.autocomplete = templates.text;\r\n        templates.date = templates.text;\r\n\r\n        return templates[fieldData.attrs.type];\r\n      };\r\n\r\n\r\n      field.password = Object.assign(field.text);\r\n      field.email = field.text;\r\n      field.date = field.text;\r\n      field.autocomplete = field.text;\r\n\r\n\r\n      field.textarea = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs),\r\n          value = fieldData.attrs.value || '',\r\n          textArea = `<textarea ${fieldAttrs}>${value}</textarea>`,\r\n          fieldLabel = `<label for=\"${fieldData.attrs.id}\">${fieldData.label}</label>`;\r\n\r\n        return fieldLabel + textArea;\r\n      };\r\n\r\n      field.checkbox = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs);\r\n        return `<label for=\"${fieldData.attrs.id}\"><input ${fieldAttrs}> ${fieldData.label}</label>`;\r\n      };\r\n\r\n      field.radio = field.checkbox;\r\n\r\n      field.select = function(fieldData) {\r\n        let options,\r\n          attrs = fieldData.attrs,\r\n          option = (opt) => {\r\n            let selected = opt.selected ? 'selected' : '';\r\n            return `<option value=\"${opt.value}\" ${selected}>${opt.label}</option>`;\r\n          },\r\n          i;\r\n        fieldData.options.reverse();\r\n        for (i = fieldData.options.length - 1; i >= 0; i--) {\r\n          options += option(fieldData.options[i]);\r\n        }\r\n        return `<${attrs.type}>${options}</${attrs.type}>`;\r\n      };\r\n\r\n      field.checkboxGroup = (fieldData) => {\r\n        let preview = [],\r\n          checkbox = Object.assign({}, fieldData);\r\n        checkbox.attrs.type = checkbox.attrs.type.replace('-group', '');\r\n        checkbox.attrs.name = checkbox.attrs.name + '[]';\r\n        delete checkbox.options;\r\n        fieldData.options.forEach(function(option) {\r\n          checkbox.label = option.label;\r\n          checkbox.attrs.value = option.value;\r\n          preview.push(field[checkbox.attrs.type](checkbox));\r\n        });\r\n\r\n        return preview.join('');\r\n      };\r\n\r\n      field.radioGroup = field.checkboxGroup;\r\n      return `<div class=\"prev-holder\">${field[type](fieldData)}</div>`;\r\n    };\r\n\r\n    // ---------------------- UTILITIES ---------------------- //\r\n\r\n    // delete options\r\n    $sortableFields.on('click', '.remove', function(e) {\r\n      e.preventDefault();\r\n      var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\r\n      if (optionsCount <= 2) {\r\n        alert('Error: ' + opts.labels.minOptionMessage);\r\n      } else {\r\n        $(this).parent('li').slideUp('250', function() {\r\n          $(this).remove();\r\n        });\r\n      }\r\n    });\r\n\r\n    // toggle fields\r\n    $sortableFields.on('click', '.toggle-form', function(e) {\r\n      e.preventDefault();\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n      $field.toggleClass('editing');\r\n      $('.prev-holder', $field).slideToggle(250);\r\n      $('.field-properties', $field).slideToggle(250, function() {\r\n        // do something after attr toggle\r\n      });\r\n    });\r\n\r\n    // update preview to label\r\n    $sortableFields.on('keyup', '.edit-label', function(e) {\r\n      $('.field-label', $(this).closest('li')).html($(this).val());\r\n    });\r\n\r\n    // remove error styling when users tries to correct mistake\r\n    $sortableFields.on('keyup', 'input.error', function() {\r\n      $(this).removeClass('error');\r\n    });\r\n\r\n    $sortableFields.on('keyup', '.edit-description', function(e) {\r\n      e.preventDefault();\r\n      var closestToolTip = $('.tooltip-element', $(this).closest('li'));\r\n      if ($(this).val() !== '') {\r\n        if (!closestToolTip.length) {\r\n          var tt = '<span class=\"tooltip-element\" tooltip=\"' + $(this).val() + '\">?</span>';\r\n          $('.field-label', $(this).closest('li')).append(tt);\r\n          // UTIL.initTooltip(tt);\r\n        } else {\r\n          closestToolTip.attr('tooltip', $(this).val()).css('display', 'inline-block');\r\n        }\r\n      } else {\r\n        if (closestToolTip.length) {\r\n          closestToolTip.css('display', 'none');\r\n        }\r\n      }\r\n    });\r\n\r\n    // format name attribute\r\n    $sortableFields.on('keyup', '.edit-name', function() {\r\n      $(this).val(UTIL.safename($(this).val()));\r\n      if ($(this).val() === '') {\r\n        $(this).addClass('field_error').attr('placeholder', opts.labels.cannotBeEmpty);\r\n      } else {\r\n        $(this).removeClass('field_error');\r\n      }\r\n    });\r\n\r\n    $sortableFields.on('keyup', 'input.fld-max-length', function() {\r\n      $(this).val(UTIL.forceNumber($(this).val()));\r\n    });\r\n\r\n    // Delete field\r\n    $sortableFields.on('click', '.del-button', function(e) {\r\n      e.preventDefault();\r\n\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n\r\n      if (opts.showWarning || true) {\r\n        // double check that the user really wants to remove the field\r\n        showRemoveWarning($field);\r\n      } else {\r\n        UTIL.removeField($field);\r\n      }\r\n    });\r\n\r\n    var showRemoveWarning = function($field) {\r\n      $('<div />', {\r\n        title: opts.labels.warning\r\n      }).append(opts.labels.fieldRemoveWarning).dialog({\r\n        modal: true,\r\n        resizable: false,\r\n        dialogClass: 'ite-warning',\r\n        buttons: [{\r\n          text: opts.labels.yes,\r\n          click: function() {\r\n            UTIL.removeField($field);\r\n            $(this).dialog('close');\r\n          }\r\n        }, {\r\n          text: opts.labels.no,\r\n          click: function() {\r\n            $(this).dialog('close');\r\n          }\r\n        }]\r\n      }, opts.labels.warning);\r\n    };\r\n\r\n    // Attach a callback to toggle required asterisk\r\n    $sortableFields.on('click', '.edit-required', function() {\r\n      var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\r\n      requiredAsterisk.toggle();\r\n    });\r\n\r\n    // Attach a callback to toggle roles visibility\r\n    $sortableFields.on('click', '.edit-roles', function() {\r\n      var roles = $(this).siblings('.property-options-1'),\r\n        enableRolesCB = $(this);\r\n      roles.slideToggle(250, function() {\r\n        if (!enableRolesCB.is(':checked')) {\r\n          $('input[type=\"checkbox\"]', roles).removeAttr('checked');\r\n        }\r\n      });\r\n    });\r\n\r\n    $sortableFields.on('mouseenter', 'li.disabled .form-element', function() {\r\n      UTIL.disabledTT($(this));\r\n    });\r\n\r\n    // Attach a callback to close link\r\n    $sortableFields.on('click', '.close-field', function(e) {\r\n      e.preventDefault();\r\n      $(this).parents('li.form-field').find('.toggle-form').trigger('click');\r\n    });\r\n\r\n    $sortableFields.on('hover', '.del-button', function(e) {\r\n      console.log('hovering!!');\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n      $field.toggleClass('delete');\r\n    });\r\n\r\n    // View XML\r\n    $(document.getElementById(frmbID + '-export-xml')).click(function(e) {\r\n      e.preventDefault();\r\n      var xml = elem.val(),\r\n        $pre = $('<pre />').text(xml);\r\n      $pre.dialog({\r\n        resizable: false,\r\n        modal: true,\r\n        width: 720,\r\n        dialogClass: 'frmb-xml',\r\n        overlay: {\r\n          color: '#333333'\r\n        }\r\n      });\r\n    });\r\n\r\n    // Clear all fields in form editor\r\n    // @todo refactor, this no longer accounts for new data model\r\n    clearAll.click(function(e) {\r\n      e.preventDefault();\r\n      if (window.confirm(opts.labels.clearAllMessage)) {\r\n        $sortableFields.empty();\r\n        elem.val('');\r\n        UTIL.save();\r\n        elem.getTemplate();\r\n      }\r\n    });\r\n\r\n    clearAll.hover(function() {\r\n      $(this).toggleClass('btn-danger').toggleClass('btn-default');\r\n    });\r\n\r\n    // Save Idea Template\r\n    $(document.getElementById(frmbID + '-save')).click(function(e) {\r\n      e.preventDefault();\r\n      if (!$formWrap.hasClass('edit-xml')) {\r\n        UTIL.save();\r\n      }\r\n      UTIL.validateForm(e);\r\n    });\r\n\r\n\r\n    var triggerDevMode = false,\r\n      keys = [],\r\n      devCode = '68,69,86';\r\n    // Super secret Developer Tools\r\n    $('.save.btn').mouseover(function() {\r\n      triggerDevMode = true;\r\n    }).mouseout(function() {\r\n      triggerDevMode = false;\r\n    });\r\n    $(document.documentElement).keydown(function(e) {\r\n      keys.push(e.keyCode);\r\n      if (keys.toString().indexOf(devCode) >= 0) {\r\n        $('.action-links').toggle();\r\n        $('.view-xml').toggle();\r\n        keys = [];\r\n      }\r\n    });\r\n    // Toggle Developer Mode\r\n    $('.dev-mode-link').click(function(e) {\r\n      e.preventDefault();\r\n      var dml = $(this);\r\n      $formWrap.toggleClass('dev-mode');\r\n      dml.parent().css('opacity', 1);\r\n      if ($formWrap.hasClass('dev-mode')) {\r\n        dml.siblings('.action-links-inner').css('width', '100%');\r\n        dml.html(opts.labels.devMode + ' ' + opts.labels.on).css('color', '#8CC63F');\r\n      } else {\r\n        dml.siblings('.action-links-inner').css('width', 0);\r\n        dml.html(opts.labels.devMode + ' ' + opts.labels.off).css('color', '#666666');\r\n        triggerDevMode = false;\r\n        $('.action-links').toggle();\r\n        $('.view-xml').toggle();\r\n      }\r\n    });\r\n\r\n    // Toggle Edit Names\r\n    $(document.getElementById(frmbID + '-edit-names')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('.name_wrap', $sortableFields).slideToggle(250, function() {\r\n        $formWrap.toggleClass('edit-names');\r\n      });\r\n    });\r\n\r\n    // Toggle Allow Select\r\n    $(document.getElementById(frmbID + '-allow-select')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('.allow-multi, .select-option', $sortableFields).slideToggle(250, function() {\r\n        $formWrap.toggleClass('allow-select');\r\n      });\r\n    });\r\n\r\n    // Toggle Edit XML\r\n    $(document.getElementById(frmbID + '-edit-xml')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('textarea.idea-template').show();\r\n      $('.template-textarea-wrap').slideToggle(250);\r\n      $formWrap.toggleClass('edit-xml');\r\n    });\r\n\r\n    $formWrap.css('min-height', cbUL.height() - 48);\r\n    elem\r\n      .wrap('<div class=\"template-textarea-wrap\"/>')\r\n      .getTemplate();\r\n  };\r\n\r\n\r\n  $.fn.formBuilder = function(options) {\r\n    var form = this;\r\n    return form.each(function() {\r\n      var element = $(this),\r\n        formBuilder;\r\n      if (element.data('formBuilder')) {\r\n        var existingFormBuilder = element.parents('.form-builder:eq(0)');\r\n        var newElement = element.clone();\r\n        existingFormBuilder.before(newElement);\r\n        existingFormBuilder.remove();\r\n        formBuilder = new FormBuilder(newElement, options);\r\n        newElement.data('formBuilder', formBuilder);\r\n      } else {\r\n        formBuilder = new FormBuilder(form, options);\r\n        element.data('formBuilder', formBuilder);\r\n      }\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}