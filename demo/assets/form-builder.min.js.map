{"version":3,"sources":["form-builder.min.js","helpers.js","kc-toggle.js","to-xml.js","form-builder.js"],"names":["_helpers","opts","doCancel","$form","$","document","getElementById","formID","uniqueArray","arrArg","filter","elem","pos","arr","indexOf","startDrag","event","ui","item","addClass","startIndex","this","index","stopDrag","removeClass","sender","sortable","safename","str","replace","toLowerCase","forceNumber","initTooltip","tt","tooltip","find","mouseenter","outerWidth","css","width","stop","fadeIn","mouseleave","fadeOut","hide","save","children","not","dataType","val","toXML","updatePreview","field","preview","html","nameAttr","type","epoch","Date","getTime","htmlEncode","value","text","htmlDecode","validateForm","errors","each","parents","fieldAttr","push","error","labels","labelEmpty","attribute","length","alert","animate","scrollTop","offset","top","targetID","attr","parent","next","slideUp","slideDown","disabledTT","title","removeAttr","data","class","append","outerHeight","left","remove","String","prototype","toCamelCase","matches","toUpperCase","markup","attrs","arguments","undefined","content","attrString","Array","isArray","join","inlineElems","template","attributes","hasOwnProperty","removeField","$field","Toggle","element","options","defaults","theme","off","on","extend","$kcToggle","insertAfter","toggleClass","is","kctOn","kctOff","kctHandle","kctInner","click","fn","kcToggle","toggle","jQuery","prepend","serialStr","liCount","c","hasClass","att","required","multipleChecked","multiple","t","multipleField","match","fName","fLabel","roleVals","map","n","roles","desc","maxLengthVal","maxLength","fSlash","fToggle","$option","optionValue","optionLabel","selected","FormBuilder","Field","fieldData","disableFields","defaultFields","label","saveUrl","showWarning","serializePrefix","add","allowSelect","autocomplete","cannotBeEmpty","checkboxGroup","checkbox","checkboxes","clearAllMessage","clearAll","close","copy","date","description","descriptionField","devMode","editNames","editXML","fieldRemoveWarning","getStarted","id","limitRole","mandatory","minOptionMessage","name","no","optional","optionLabelPlaceholder","optionValuePlaceholder","optionEmpty","paragraph","radioGroup","radio","removeMessage","selectOptions","select","selectionsMessage","textarea","warning","viewXML","yes","frmbID","lastID","boxID","UTIL","formData","Map","json","prepProperties","properties","Object","assign","availableRoles","meta","defaultOrder","inArray","optionFields","option","prop","sortProperties","fieldProperties","order","sortedProps","concat","keys","property","fieldTypes","cbUL","frmbFields","fieldLabel","idName","saveBtn","formActions","actionLinksInner","actionLinks","$sortableFields","cursor","opacity","beforeStop","lastIndex","curIndex","placeholder","over","target","start","cancel","helper","connectWith","revert","after","update","stopIndex","prepFieldVars","receive","before","cbWrap","$formWrap","doSave","getTemplate","xml","parseXML","fields","i","appendField","disabledBeforeAfter","li","delBtn","toggleBtn","fieldActions","liContent","fieldSettings","data-type","fieldPreview","eq","curFieldData","JSON","stringify","set","propertyMarkup","fieldSetting","depth","propertyId","setting","charAt","slice","setTimeout","for","fieldAttrs","templates","password","email","textArea","opt","reverse","forEach","e","preventDefault","optionsCount","slideToggle","closest","closestToolTip","showRemoveWarning","dialog","modal","resizable","dialogClass","buttons","requiredAsterisk","siblings","enableRolesCB","trigger","console","log","$pre","overlay","color","window","confirm","empty","hover","triggerDevMode","devCode","mouseover","mouseout","documentElement","keydown","keyCode","toString","dml","show","height","wrap","formBuilder","form"],"mappings":"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","file":"form-builder.min.js","sourcesContent":["'use strict';\n\nvar _helpers = function _helpers(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n      $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = function (arrArg) {\n    return arrArg.filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function (event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function (event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function (str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function (str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function (tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function () {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function () {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function () {\n\n    var $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function (field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function (type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function (value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function (value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function () {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function () {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n            fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function () {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function () {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function (field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function () {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function () {\n    return this.replace(/(\\-\\w)/g, function (matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function (type) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    var inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n    return template;\n  };\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function ($field) {\n    $field.slideUp(250, function () {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n'use strict';\n\n(function ($) {\n  'use strict';\n\n  var Toggle = function Toggle(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n        $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = '<div class=\"kct-on\">' + opts.labels.on + '</div>',\n        kctOff = '<div class=\"kct-off\">' + opts.labels.off + '</div>',\n        kctHandle = '<div class=\"kct-handle\"></div>',\n        kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function () {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n  };\n\n  $.fn.kcToggle = function (options) {\n    var toggle = this;\n    return toggle.each(function () {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n})(jQuery);\n'use strict';\n\n(function ($) {\n  'use strict';\n  $.fn.toXML = function (options) {\n    var defaults = {\n      prepend: '',\n      attributes: ['class']\n    };\n    var opts = $.extend(defaults, options);\n\n    var serialStr = '';\n\n    // Begin the core plugin\n    this.each(function () {\n      var liCount = 0;\n      var c = 1;\n\n      if ($(this).children().length >= 1) {\n        serialStr += '<form-template>\\n\\t<fields>';\n\n        // build new xml\n        $(this).children().each(function () {\n          var $field = $(this);\n          if (!($field.hasClass('moving') || $field.hasClass('disabled'))) {\n            for (var att = 0; att < opts.attributes.length; att++) {\n              var required = $('input.required', $field).is(':checked') ? 'required=\"true\" ' : 'required=\"false\" ',\n                  multipleChecked = $('input[name=\"multiple\"]', $field).is(':checked'),\n                  multiple = multipleChecked ? 'style=\"multiple\" ' : '',\n                  t = $field.attr(opts.attributes[att]).replace(' form-field', ''),\n                  // field type\n              multipleField = t.match(/(select|checkbox-group|radio-group)/),\n                  type = 'type=\"' + t + '\" ',\n                  fName = 'name=\"' + $('input.fld-name', $field).val() + '\" ',\n                  fLabel = 'label=\"' + $('input.fld-label', $field).val() + '\" ',\n                  roleVals = $.map($('input.roles-field:checked', $field), function (n) {\n                return n.value;\n              }).join(','),\n                  roles = roleVals !== '' ? 'role=\"' + roleVals + '\" ' : '',\n                  desc = 'description=\"' + $('input.fld-description', $field).val() + '\" ',\n                  maxLengthVal = $('input.fld-max-length', $field).val(),\n                  maxLength = 'max-length=\"' + (maxLengthVal !== undefined ? maxLengthVal : '') + '\" ',\n                  fSlash = !multipleField ? '/' : '';\n\n              var fToggle = $('.checkbox-toggle', $field).is(':checked') ? 'toggle=\"true\" ' : '';\n\n              serialStr += '\\n\\t\\t<field ' + fName + fLabel + fToggle + multiple + roles + desc + (maxLengthVal !== '' ? maxLengthVal !== undefined ? maxLength : '' : '') + required + type + fSlash + '>';\n              if (multipleField) {\n                c = 1;\n                $('.sortable-options li', $field).each(function () {\n                  var $option = $(this),\n                      optionValue = 'value=\"' + $('.option-value', $option).val() + '\"',\n                      optionLabel = $('.option-label', $option).val(),\n                      selected = $('.select-option', $option).is(':checked') ? ' selected=\"true\"' : '';\n                  serialStr += '\\n\\t\\t\\t<option' + selected + ' ' + optionValue + '>' + optionLabel + '</option>';\n                  c++;\n                });\n                serialStr += '\\n\\t\\t</field>';\n              }\n            }\n          }\n          liCount++;\n        });\n        serialStr += '\\n\\t</fields>\\n</form-template>';\n      } // if \"$(this).children().length >= 1\"\n    });\n    return serialStr;\n  };\n})(jQuery);\n'use strict';\n\n(function ($) {\n  'use strict';\n  var FormBuilder = function FormBuilder(element, options) {\n\n    var defaults = {\n      dataType: 'json', // xml or json\n      // Uneditable fields or other content you would like to\n      // appear before and after regular fields.\n      disableFields: {\n        // before: '<h2>Header</h2>',\n        // after: '<h3>Footer</h3>'\n      },\n      // array of objects with fields values\n      // ex:\n      // defaultFields: [{\n      //   label: 'First Name',\n      //   name: 'first-name',\n      //   required: 'true',\n      //   description: 'Your first name',\n      //   type: 'text'\n      // }, {\n      //   label: 'Phone',\n      //   name: 'phone',\n      //   description: 'How can we reach you?',\n      //   type: 'text'\n      // }],\n      defaultFields: [],\n      roles: [{\n        value: 1,\n        label: 'Administrator'\n      }],\n      saveUrl: false,\n      showWarning: false,\n      serializePrefix: 'frmb',\n      labels: {\n        add: 'Add Item',\n        allowSelect: 'Allow Select',\n        autocomplete: 'Autocomplete',\n        cannotBeEmpty: 'This field cannot be empty',\n        checkboxGroup: 'Checkbox Group',\n        checkbox: 'Checkbox',\n        checkboxes: 'Checkboxes',\n        'class': 'Class',\n        clearAllMessage: 'Are you sure you want to remove all items?',\n        clearAll: 'Clear All',\n        close: 'Close',\n        copy: 'Copy To Clipboard',\n        date: 'Date Field',\n        description: 'Help Text',\n        descriptionField: 'Description',\n        devMode: 'Developer Mode',\n        disableFields: 'These fields cannot be moved.',\n        editNames: 'Edit Names',\n        editXML: 'Edit XML',\n        fieldRemoveWarning: 'Are you sure you want to remove this field?',\n        getStarted: 'Drag a field from the right to this area',\n        hide: 'Edit',\n        id: 'ID',\n        label: 'Label',\n        labelEmpty: 'Field Label cannot be empty',\n        limitRole: 'Limit access to one or more of the following roles:',\n        mandatory: 'Mandatory',\n        maxLength: 'Max Length',\n        minOptionMessage: 'This field requires a minimum of 2 options',\n        name: 'Name',\n        no: 'No',\n        off: 'Off',\n        on: 'On',\n        optional: 'optional',\n        options: 'Options',\n        optionLabelPlaceholder: 'Label',\n        optionValuePlaceholder: 'Value',\n        optionEmpty: 'Option value required',\n        paragraph: 'Paragraph',\n        preview: 'Preview',\n        radioGroup: 'Radio Group',\n        radio: 'Radio',\n        removeMessage: 'Remove Element',\n        remove: '&#215;',\n        required: 'Required',\n        roles: 'Limit Access',\n        save: 'Save Template',\n        selectOptions: 'Select Items',\n        select: 'Select',\n        selectionsMessage: 'Allow Multiple Selections',\n        text: 'Text Field',\n        textarea: 'Text Area',\n        warning: 'Warning!',\n        viewXML: 'View XML',\n        yes: 'Yes'\n      }\n    };\n\n    var opts = $.extend(true, defaults, options),\n        elem = $(element),\n        frmbID = 'frmb-' + $('ul[id^=frmb-]').length++;\n\n    opts.formID = frmbID;\n\n    var lastID = 1,\n        boxID = frmbID + '-control-box';\n\n    var UTIL = _helpers(opts);\n\n    var formData = new Map();\n\n    function Field(fieldData) {\n      this.elem = elem;\n    }\n\n    Field.prototype.json = function () {};\n\n    /**\r\n     * Prepare the properties for the field so they can be generated and edited later on.\r\n     * @param  {object} fieldData\r\n     * @return {array}            an array of property objects\r\n     */\n    var prepProperties = function prepProperties(fieldData) {\n      var properties = Object.assign({}, fieldData);\n\n      var availableRoles = properties.meta.roles.map(function (elem) {\n        elem.type = 'checkbox';\n        return elem;\n      }),\n          sortedProperties,\n          defaultOrder = ['required', 'label', 'description', 'class', 'roles', 'name'];\n\n      properties.name = properties.attrs.name || UTIL.nameAttr(properties.attrs.type);\n\n      // if field type is not checkbox, checkbox/radio group or select list, add max length\n      if ($.inArray(properties.type, ['checkbox', 'select', 'checkbox-group', 'date', 'autocomplete']) === -1 && !properties.attrs.maxLength) {\n        properties.attrs.maxLength = '';\n        defaultOrder.push('maxLength');\n      }\n\n      properties.meta.roles = {\n        options: availableRoles,\n        value: 1,\n        type: 'checkbox'\n      };\n\n      // options need a field for value, label and checkbox to select\n      if (fieldData.options) {\n        var optionFields = fieldData.options.map(function (elem, index) {\n          var option = {\n            options: [],\n            type: 'none'\n          };\n          for (var prop in elem) {\n            if (elem.hasOwnProperty(prop)) {\n              var field = {\n                value: elem[prop],\n                label: prop,\n                name: 'option-' + prop\n              };\n              if ('selected' === prop) {\n                field.type = 'checkbox';\n              }\n              option.options.push(field);\n            }\n          }\n          return option;\n        });\n\n        properties.options = {\n          options: optionFields,\n          label: opts.labels.options,\n          type: 'none'\n        };\n      }\n\n      delete properties.attrs.type;\n\n      for (var prop in properties) {\n        if (properties.hasOwnProperty(prop)) {\n          properties[prop] = sortProperties(defaultOrder, prop);\n        }\n      }\n\n      return fieldProperties;\n    };\n\n    var sortProperties = function sortProperties(order, properties) {\n      var sortedProps = [];\n      if (Array.isArray(properties)) {\n        sortedProps = UTIL.uniqueArray(order.concat(Object.keys(properties))).map(function (elem) {\n          var property = {\n            name: elem\n          };\n          if (typeof properties[elem] === 'object') {\n            Object.assign(property, properties[elem]);\n          } else {\n            property.value = properties[elem];\n          }\n          return property;\n        });\n      } else {\n        sortedProps.push(properties);\n      }\n\n      return sortedProps;\n    };\n\n    var fieldTypes = [{\n      id: 'text',\n      'class': 'icon-text'\n    }, {\n      id: 'autocomplete',\n      'class': 'icon-autocomplete'\n    }, {\n      id: 'select',\n      'class': 'icon-select'\n    }, {\n      id: 'textarea',\n      'class': 'icon-text-area'\n    }, {\n      id: 'date',\n      'class': 'icon-calendar'\n    }, {\n      id: 'radio-group',\n      'class': 'icon-radio-group'\n    }, {\n      id: 'checkbox',\n      'class': 'icon-checkbox'\n    }, {\n      id: 'checkbox-group',\n      'class': 'icon-checkbox-group'\n    }];\n\n    // Create draggable fields for formBuilder\n    var cbUL = $('<ul/>', {\n      id: boxID,\n      'class': 'frmb-control'\n    });\n\n    // Setup the input fields\n    var frmbFields = fieldTypes.map(function (elem) {\n\n      // be sure elem.id is converted to camelCase to get label\n      var fieldLabel = elem.id.toCamelCase(),\n          idName = UTIL.nameAttr(elem.id),\n          fieldData = {\n        label: opts.labels[fieldLabel],\n        meta: {\n          description: '',\n          roles: opts.roles\n        },\n        attrs: {\n          type: elem.id,\n          name: idName,\n          'class': elem['class'],\n          required: false,\n          id: idName\n        }\n      };\n\n      if ($.inArray(elem.id, ['select', 'checkbox-group', 'radio-group']) !== -1) {\n        fieldData.options = [{\n          selected: false,\n          value: 'option-1-value',\n          label: 'Option 1 Label'\n        }, {\n          selected: false,\n          value: 'option-2-value',\n          label: 'Option 2 Label'\n        }];\n      }\n\n      fieldData.properties = prepProperties(fieldData);\n\n      return $('<li/>', fieldData.attrs).data('fieldData', fieldData).html(fieldData.label).removeAttr('type');\n    });\n\n    cbUL.append(frmbFields);\n\n    // Build our headers and action links\n    var viewXML = $('<a/>', {\n      id: frmbID + '-export-xml',\n      text: opts.labels.viewXML,\n      'class': 'view-xml'\n    }),\n        allowSelect = $('<a/>', {\n      id: frmbID + '-allow-select',\n      text: opts.labels.allowSelect,\n      'class': 'allow-select'\n    }).prop('checked', 'checked'),\n        editXML = $('<a/>', {\n      id: frmbID + '-edit-xml',\n      text: opts.labels.editXML,\n      'class': 'edit-xml'\n    }),\n        editNames = $('<a/>', {\n      id: frmbID + '-edit-names',\n      text: opts.labels.editNames,\n      'class': 'edit-names'\n    }),\n        clearAll = $('<button/>', {\n      text: opts.labels.clearAll,\n      'class': 'clear-all btn btn-default'\n    }),\n        saveBtn = $('<button/>', {\n      id: frmbID + '-save',\n      text: opts.labels.save,\n      'class': 'save btn btn-primary'\n    }),\n        formActions = $('<div/>', {\n      id: frmbID + '-actions',\n      'class': 'form-actions btn-group'\n    }),\n        actionLinksInner = $('<div/>', {\n      id: frmbID + '-action-links-inner',\n      'class': 'action-links-inner'\n    }).append(editXML, ' | ', editNames, ' | ', allowSelect, ' | ', clearAll, ' |&nbsp;'),\n        devMode = $('<span/>', {\n      'class': 'dev-mode-link'\n    }).html(opts.labels.devMode + ' ' + opts.labels.off),\n        actionLinks = $('<div/>', {\n      id: frmbID + '-action-links',\n      'class': 'action-links'\n    }).append(actionLinksInner, devMode);\n\n    formActions.append(clearAll, saveBtn);\n\n    // Sortable fields\n    var $sortableFields = $('<ul/>').attr('id', frmbID).addClass('frmb').sortable({\n      cursor: 'move',\n      opacity: 0.9,\n      beforeStop: function beforeStop(event, ui) {\n        event = event;\n        var lastIndex = $('> li', $sortableFields).length - 1,\n            curIndex = ui.placeholder.index();\n        UTIL.doCancel = curIndex <= 1 || curIndex === lastIndex;\n      },\n      over: function over(event) {\n        $(event.target).parent().addClass('active');\n      },\n      start: UTIL.startDrag,\n      stop: UTIL.stopDrag,\n      cancel: 'input, .disabled, .sortable-options, .add, .btn, .no-drag, .prev-holder select',\n      placeholder: 'frmb-placeholder'\n    });\n\n    // ControlBox with different fields\n    cbUL.sortable({\n      helper: 'clone',\n      opacity: 0.9,\n      connectWith: $sortableFields,\n      cursor: 'move',\n      placeholder: 'ui-state-highlight',\n      start: UTIL.startDrag,\n      stop: UTIL.stopDrag,\n      revert: 150,\n      remove: function remove(event, ui) {\n        if (UTIL.startIndex === 0) {\n          cbUL.prepend(ui.item);\n        } else {\n          $('li:eq(' + (UTIL.startIndex - 1) + ')', cbUL).after(ui.item);\n        }\n      },\n      update: function update(event, ui) {\n        elem.stopIndex = $('li', $sortableFields).index(ui.item) === 0 ? '0' : $('li', $sortableFields).index(ui.item);\n        if ($('li', $sortableFields).index(ui.item) < 0) {\n          $(this).sortable('cancel');\n        } else {\n          prepFieldVars(ui.item, true);\n        }\n      },\n      receive: function receive(event, ui) {\n        if (ui.sender.hasClass('frmb') || ui.sender.hasClass('frmb-control')) {\n          $(ui.sender).sortable('cancel');\n        }\n      }\n    });\n\n    // Replace the textarea with sortable list.\n    elem.before($sortableFields).parent().addClass('frmb-wrap').append(actionLinks, viewXML);\n\n    var cbWrap = $('<div/>', {\n      id: frmbID + '-cb-wrap',\n      'class': 'cb-wrap'\n    }).append(cbUL, formActions);\n\n    var $formWrap = $('.frmb-wrap').before(cbWrap).append(actionLinks);\n\n    var doSave = function doSave() {\n      if ($(this).parents('li.disabled').length === 0) {\n        if ($(this).name === 'label' && $(this).val() === '') {\n          return alert('Error: ' + opts.labels.labelEmpty);\n        }\n        UTIL.save();\n      }\n    };\n\n    // Not pretty but we need to save a lot so users don't have to keep clicking a save button\n    $('input, select', $sortableFields).on('change', doSave);\n    $('input, select', $sortableFields).on('blur', doSave);\n\n    // Parse saved XML template data\n    elem.getTemplate = function () {\n      var xml = elem.val() !== '' ? $.parseXML(elem.val()) : false,\n          fields = $(xml).find('field');\n      if (fields.length > 0) {\n        fields.each(function () {\n          prepFieldVars($(this));\n        });\n      } else if (!xml) {\n        // Load default fields if none are set\n        if (opts.defaultFields.length) {\n          for (var i = opts.defaultFields.length - 1; i >= 0; i--) {\n            appendField(opts.defaultFields[i]);\n          }\n        } else {\n          $formWrap.addClass('empty').attr('data-content', opts.labels.getStarted);\n        }\n        disabledBeforeAfter();\n      }\n    };\n\n    var disabledBeforeAfter = function disabledBeforeAfter() {\n      var li = '<li class=\"disabled __POSITION__\">__CONTENT__</li>';\n      if (opts.disableFields.before && !$('.disabled.before', $sortableFields).length) {\n        $sortableFields.prepend(li.replace('__POSITION__', 'before').replace('__CONTENT__', opts.disableFields.before));\n      }\n      if (opts.disableFields.after && !$('.disabled.after', $sortableFields).length) {\n        $sortableFields.append(li.replace('__POSITION__', 'after').replace('__CONTENT__', opts.disableFields.after));\n      }\n    };\n\n    var prepFieldVars = function prepFieldVars($field) {\n      var fieldData = $field.data('fieldData');\n      appendField(fieldData);\n      $formWrap.removeClass('empty');\n      disabledBeforeAfter();\n    };\n\n    /**\r\n     * Append our field to the stage\r\n     * @param  {object} fieldData\r\n     * @return {string}           markup for our field, includes properties and preview\r\n     */\n    var appendField = function appendField(fieldData) {\n      var li = '',\n          delBtn = UTIL.markup('a', {\n        'class': 'del-button btn',\n        title: opts.labels.removeMessage,\n        id: 'del_' + lastID\n      }, opts.labels.remove),\n          toggleBtn = UTIL.markup('a', {\n        id: 'frm-' + lastID,\n        'class': 'toggle-form btn icon-pencil',\n        title: opts.labels.hide\n      }),\n          required = UTIL.markup('span', {\n        'class': 'required-asterisk'\n      }, '*'),\n          tooltip = fieldData.description ? UTIL.markup('span', {\n        'class': 'tooltip-element',\n        tooltip: fieldData.description\n      }, '?') : '',\n          fieldLabel = UTIL.markup('div', {\n        'class': 'field-label'\n      }, [fieldData.label, required, tooltip]),\n          fieldActions = UTIL.markup('div', {\n        'class': 'field-actions'\n      }, [toggleBtn, delBtn]);\n\n      var liContent = UTIL.markup('div', {\n        'class': 'field-properties'\n      }, fieldSettings(fieldData));\n\n      li = UTIL.markup('li', {\n        // id: 'frm-' + lastID + '-item',\n        id: UTIL.nameAttr(fieldData.attrs.type),\n        'data-type': fieldData.attrs.type,\n        'class': fieldData.attrs.type + ' form-field'\n      }, [fieldActions, fieldLabel, fieldPreview(fieldData), liContent]);\n\n      if (elem.stopIndex) {\n        $('li', $sortableFields).eq(elem.stopIndex).after(li);\n      } else {\n        $sortableFields.append(li);\n      }\n\n      $(document.getElementById('frm-' + lastID + '-item')).hide().slideDown(250);\n\n      lastID++;\n\n      var curFieldData = JSON.stringify(fieldData);\n      formData.set(fieldData.attrs.id, curFieldData);\n      UTIL.save();\n    };\n\n    var fieldSettings = function fieldSettings(fieldData) {\n      var markup = [],\n          propertyMarkup = fieldProperties(fieldData.properties).join('');\n      markup.push(propertyMarkup);\n\n      return markup.join('');\n    };\n\n    /**\r\n     * Build the editable properties for the field\r\n     * @param  {object} fieldData configuration object for field\r\n     * @return {string}        markup for advanced fields\r\n     */\n    var fieldProperties = function fieldProperties(properties) {\n      return properties.map(function (property) {\n        var field = UTIL.markup('div', {\n          'class': 'field-property ' + property.name + '-wrap'\n        }, fieldSetting(property));\n        return field;\n      });\n    };\n\n    var fieldSetting = function fieldSetting(property) {\n      var depth = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      var name = property.name || '',\n          propertyId = (name + '-' + lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\n          label = property.label || opts.labels[name.toCamelCase()] || false,\n          fields = property.fields || [],\n          type = property.type || 'text',\n          value = property.value || '',\n          setting = [];\n\n      if (name === 'required') {\n        type = 'checkbox';\n      }\n\n      if (property.options) {\n        depth++;\n        fields = property.options.map(function (val) {\n          return fieldSetting(val, depth);\n        });\n\n        fields = UTIL.markup('div', {\n          'class': 'property-options-' + depth\n        }, fields);\n      }\n\n      if ('none' !== type) {\n\n        var attrs = {\n          type: type,\n          name: propertyId,\n          value: value,\n          id: propertyId,\n          'class': 'edit-' + name\n        };\n\n        if (depth === 2) {\n          attrs.placeholder = label.charAt(0).toUpperCase() + label.slice(1);\n        } else if (depth === 1) {\n          setTimeout(function () {\n            $('.property-options-1', document.getElementById('frm-' + lastID + '-item')).sortable();\n          }, 1000);\n        }\n\n        setting.push(UTIL.markup('input', attrs));\n      }\n\n      if (label) {\n        setting.push(UTIL.markup('label', {\n          'for': propertyId\n        }, label));\n      }\n\n      setting.push(setting, fields);\n\n      return setting.join('');\n    };\n\n    /**\r\n     * Generate preview markup\r\n     * @param  {object} attrs\r\n     * @return {string}       preview markup for field\r\n     */\n    var fieldPreview = function fieldPreview(fieldData) {\n\n      delete fieldData.attrs['class'];\n\n      var field = {},\n          type = fieldData.attrs.type.toCamelCase();\n\n      field.text = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs),\n            field = '<input ' + fieldAttrs + '>',\n            value = fieldData.attrs.value || '',\n            fieldLabel = '<label for=\"' + fieldData.attrs.id + '\">' + fieldData.label + '</label>',\n            templates = {};\n\n        templates.text = fieldLabel + field;\n        templates.password = templates.text;\n        templates.autocomplete = templates.text;\n        templates.date = templates.text;\n\n        return templates[fieldData.attrs.type];\n      };\n\n      field.password = Object.assign(field.text);\n      field.email = field.text;\n      field.date = field.text;\n      field.autocomplete = field.text;\n\n      field.textarea = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs),\n            value = fieldData.attrs.value || '',\n            textArea = '<textarea ' + fieldAttrs + '>' + value + '</textarea>',\n            fieldLabel = '<label for=\"' + fieldData.attrs.id + '\">' + fieldData.label + '</label>';\n\n        return fieldLabel + textArea;\n      };\n\n      field.checkbox = function (fieldData) {\n        var fieldAttrs = UTIL.attrString(fieldData.attrs);\n        return '<label for=\"' + fieldData.attrs.id + '\"><input ' + fieldAttrs + '> ' + fieldData.label + '</label>';\n      };\n\n      field.radio = field.checkbox;\n\n      field.select = function (fieldData) {\n        var options = undefined,\n            attrs = fieldData.attrs,\n            option = function option(opt) {\n          var selected = opt.selected ? 'selected' : '';\n          return '<option value=\"' + opt.value + '\" ' + selected + '>' + opt.label + '</option>';\n        },\n            i = undefined;\n        fieldData.options.reverse();\n        for (i = fieldData.options.length - 1; i >= 0; i--) {\n          options += option(fieldData.options[i]);\n        }\n        return '<' + attrs.type + '>' + options + '</' + attrs.type + '>';\n      };\n\n      field.checkboxGroup = function (fieldData) {\n        var preview = [],\n            checkbox = Object.assign({}, fieldData);\n        checkbox.attrs.type = checkbox.attrs.type.replace('-group', '');\n        checkbox.attrs.name = checkbox.attrs.name + '[]';\n        delete checkbox.options;\n        fieldData.options.forEach(function (option) {\n          checkbox.label = option.label;\n          checkbox.attrs.value = option.value;\n          preview.push(field[checkbox.attrs.type](checkbox));\n        });\n\n        return preview.join('');\n      };\n\n      field.radioGroup = field.checkboxGroup;\n      return '<div class=\"prev-holder\">' + field[type](fieldData) + '</div>';\n    };\n\n    // ---------------------- UTILITIES ---------------------- //\n\n    // delete options\n    $sortableFields.on('click', '.remove', function (e) {\n      e.preventDefault();\n      var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\n      if (optionsCount <= 2) {\n        alert('Error: ' + opts.labels.minOptionMessage);\n      } else {\n        $(this).parent('li').slideUp('250', function () {\n          $(this).remove();\n        });\n      }\n    });\n\n    // toggle fields\n    $sortableFields.on('click', '.toggle-form', function (e) {\n      e.preventDefault();\n      var $field = $(this).parents('.form-field:eq(0)');\n      $field.toggleClass('editing');\n      $('.prev-holder', $field).slideToggle(250);\n      $('.field-properties', $field).slideToggle(250, function () {\n        // do something after attr toggle\n      });\n    });\n\n    // update preview to label\n    $sortableFields.on('keyup', '.edit-label', function (e) {\n      $('.field-label', $(this).closest('li')).html($(this).val());\n    });\n\n    // remove error styling when users tries to correct mistake\n    $sortableFields.on('keyup', 'input.error', function () {\n      $(this).removeClass('error');\n    });\n\n    $sortableFields.on('keyup', '.edit-description', function (e) {\n      e.preventDefault();\n      var closestToolTip = $('.tooltip-element', $(this).closest('li'));\n      if ($(this).val() !== '') {\n        if (!closestToolTip.length) {\n          var tt = '<span class=\"tooltip-element\" tooltip=\"' + $(this).val() + '\">?</span>';\n          $('.field-label', $(this).closest('li')).append(tt);\n          // UTIL.initTooltip(tt);\n        } else {\n            closestToolTip.attr('tooltip', $(this).val()).css('display', 'inline-block');\n          }\n      } else {\n        if (closestToolTip.length) {\n          closestToolTip.css('display', 'none');\n        }\n      }\n    });\n\n    // format name attribute\n    $sortableFields.on('keyup', '.edit-name', function () {\n      $(this).val(UTIL.safename($(this).val()));\n      if ($(this).val() === '') {\n        $(this).addClass('field_error').attr('placeholder', opts.labels.cannotBeEmpty);\n      } else {\n        $(this).removeClass('field_error');\n      }\n    });\n\n    $sortableFields.on('keyup', 'input.fld-max-length', function () {\n      $(this).val(UTIL.forceNumber($(this).val()));\n    });\n\n    // Delete field\n    $sortableFields.on('click', '.del-button', function (e) {\n      e.preventDefault();\n\n      var $field = $(this).parents('.form-field:eq(0)');\n\n      if (opts.showWarning || true) {\n        // double check that the user really wants to remove the field\n        showRemoveWarning($field);\n      } else {\n        UTIL.removeField($field);\n      }\n    });\n\n    var showRemoveWarning = function showRemoveWarning($field) {\n      $('<div />', {\n        title: opts.labels.warning\n      }).append(opts.labels.fieldRemoveWarning).dialog({\n        modal: true,\n        resizable: false,\n        dialogClass: 'ite-warning',\n        buttons: [{\n          text: opts.labels.yes,\n          click: function click() {\n            UTIL.removeField($field);\n            $(this).dialog('close');\n          }\n        }, {\n          text: opts.labels.no,\n          click: function click() {\n            $(this).dialog('close');\n          }\n        }]\n      }, opts.labels.warning);\n    };\n\n    // Attach a callback to toggle required asterisk\n    $sortableFields.on('click', '.edit-required', function () {\n      var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\n      requiredAsterisk.toggle();\n    });\n\n    // Attach a callback to toggle roles visibility\n    $sortableFields.on('click', '.edit-roles', function () {\n      var roles = $(this).siblings('.property-options-1'),\n          enableRolesCB = $(this);\n      roles.slideToggle(250, function () {\n        if (!enableRolesCB.is(':checked')) {\n          $('input[type=\"checkbox\"]', roles).removeAttr('checked');\n        }\n      });\n    });\n\n    $sortableFields.on('mouseenter', 'li.disabled .form-element', function () {\n      UTIL.disabledTT($(this));\n    });\n\n    // Attach a callback to close link\n    $sortableFields.on('click', '.close-field', function (e) {\n      e.preventDefault();\n      $(this).parents('li.form-field').find('.toggle-form').trigger('click');\n    });\n\n    $sortableFields.on('hover', '.del-button', function (e) {\n      console.log('hovering!!');\n      var $field = $(this).parents('.form-field:eq(0)');\n      $field.toggleClass('delete');\n    });\n\n    // View XML\n    $(document.getElementById(frmbID + '-export-xml')).click(function (e) {\n      e.preventDefault();\n      var xml = elem.val(),\n          $pre = $('<pre />').text(xml);\n      $pre.dialog({\n        resizable: false,\n        modal: true,\n        width: 720,\n        dialogClass: 'frmb-xml',\n        overlay: {\n          color: '#333333'\n        }\n      });\n    });\n\n    // Clear all fields in form editor\n    // @todo refactor, this no longer accounts for new data model\n    clearAll.click(function (e) {\n      e.preventDefault();\n      if (window.confirm(opts.labels.clearAllMessage)) {\n        $sortableFields.empty();\n        elem.val('');\n        UTIL.save();\n        elem.getTemplate();\n      }\n    });\n\n    clearAll.hover(function () {\n      $(this).toggleClass('btn-danger').toggleClass('btn-default');\n    });\n\n    // Save Idea Template\n    $(document.getElementById(frmbID + '-save')).click(function (e) {\n      e.preventDefault();\n      if (!$formWrap.hasClass('edit-xml')) {\n        UTIL.save();\n      }\n      UTIL.validateForm(e);\n    });\n\n    var triggerDevMode = false,\n        keys = [],\n        devCode = '68,69,86';\n    // Super secret Developer Tools\n    $('.save.btn').mouseover(function () {\n      triggerDevMode = true;\n    }).mouseout(function () {\n      triggerDevMode = false;\n    });\n    $(document.documentElement).keydown(function (e) {\n      keys.push(e.keyCode);\n      if (keys.toString().indexOf(devCode) >= 0) {\n        $('.action-links').toggle();\n        $('.view-xml').toggle();\n        keys = [];\n      }\n    });\n    // Toggle Developer Mode\n    $('.dev-mode-link').click(function (e) {\n      e.preventDefault();\n      var dml = $(this);\n      $formWrap.toggleClass('dev-mode');\n      dml.parent().css('opacity', 1);\n      if ($formWrap.hasClass('dev-mode')) {\n        dml.siblings('.action-links-inner').css('width', '100%');\n        dml.html(opts.labels.devMode + ' ' + opts.labels.on).css('color', '#8CC63F');\n      } else {\n        dml.siblings('.action-links-inner').css('width', 0);\n        dml.html(opts.labels.devMode + ' ' + opts.labels.off).css('color', '#666666');\n        triggerDevMode = false;\n        $('.action-links').toggle();\n        $('.view-xml').toggle();\n      }\n    });\n\n    // Toggle Edit Names\n    $(document.getElementById(frmbID + '-edit-names')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('.name_wrap', $sortableFields).slideToggle(250, function () {\n        $formWrap.toggleClass('edit-names');\n      });\n    });\n\n    // Toggle Allow Select\n    $(document.getElementById(frmbID + '-allow-select')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('.allow-multi, .select-option', $sortableFields).slideToggle(250, function () {\n        $formWrap.toggleClass('allow-select');\n      });\n    });\n\n    // Toggle Edit XML\n    $(document.getElementById(frmbID + '-edit-xml')).click(function (e) {\n      e.preventDefault();\n      $(this).toggleClass('active');\n      $('textarea.idea-template').show();\n      $('.template-textarea-wrap').slideToggle(250);\n      $formWrap.toggleClass('edit-xml');\n    });\n\n    $formWrap.css('min-height', cbUL.height() - 48);\n    elem.wrap('<div class=\"template-textarea-wrap\"/>').getTemplate();\n  };\n\n  $.fn.formBuilder = function (options) {\n    var form = this;\n    return form.each(function () {\n      var element = $(this);\n      if (element.data('formBuilder')) {\n        return;\n      }\n      var formBuilder = new FormBuilder(this, options);\n      element.data('formBuilder', formBuilder);\n    });\n  };\n})(jQuery);","var _helpers = function(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n  $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = (arrArg) => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function(event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function(event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function(str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function(str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function(tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function() {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function() {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function() {\n\n    let $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function(field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function(type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function(value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function(value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function() {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function() {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n          fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function() {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function() {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function(field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function() {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function() {\n    return this.replace(/(\\-\\w)/g, function(matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function(type, attrs = {}, content = '') {\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    let inlineElems = ['input'],\n      template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n    return template;\n  };\n\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function(attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function($field) {\n    $field.slideUp(250, function() {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n","(function($) {\n  'use strict';\n\n  var Toggle = function(element, options) {\n\n    var defaults = {\n      theme: 'fresh',\n      labels: {\n        off: 'Off',\n        on: 'On'\n      }\n    };\n\n    var opts = $.extend(defaults, options),\n      $kcToggle = $('<div class=\"kc-toggle\"/>').insertAfter(element).append(element);\n\n    $kcToggle.toggleClass('on', element.is(':checked'));\n\n    var kctOn = `<div class=\"kct-on\">${opts.labels.on}</div>`,\n        kctOff = `<div class=\"kct-off\">${opts.labels.off}</div>`,\n        kctHandle = `<div class=\"kct-handle\"></div>`,\n        kctInner = `<div class=\"kct-inner\">${kctOn}${kctHandle}${kctOff}</div>`;\n\n    $kcToggle.append(kctInner);\n\n    $kcToggle.click(function() {\n      element.attr('checked', !element.attr('checked'));\n      $(this).toggleClass('on');\n    });\n\n  };\n\n  $.fn.kcToggle = function(options) {\n    var toggle = this;\n    return toggle.each(function() {\n      var element = $(this);\n      if (element.data('kcToggle')) {\n        return;\n      }\n      var kcToggle = new Toggle(element, options);\n      element.data('kcToggle', kcToggle);\n    });\n  };\n\n})(jQuery);\n","(function($) {\n  'use strict';\n  $.fn.toXML = function(options) {\n    var defaults = {\n      prepend: '',\n      attributes: ['class']\n    };\n    var opts = $.extend(defaults, options);\n\n    var serialStr = '';\n\n    // Begin the core plugin\n    this.each(function() {\n      var liCount = 0;\n      var c = 1;\n\n      if ($(this).children().length >= 1) {\n        serialStr += '<form-template>\\n\\t<fields>';\n\n        // build new xml\n        $(this).children().each(function() {\n          var $field = $(this);\n          if (!($field.hasClass('moving') || $field.hasClass('disabled'))) {\n            for (var att = 0; att < opts.attributes.length; att++) {\n              var required = $('input.required', $field).is(':checked') ? 'required=\"true\" ' : 'required=\"false\" ',\n                multipleChecked = $('input[name=\"multiple\"]', $field).is(':checked'),\n                multiple = multipleChecked ? 'style=\"multiple\" ' : '',\n                t = $field.attr(opts.attributes[att]).replace(' form-field', ''), // field type\n                multipleField = t.match(/(select|checkbox-group|radio-group)/),\n                type = 'type=\"' + t + '\" ',\n                fName = 'name=\"' + $('input.fld-name', $field).val() + '\" ',\n                fLabel = 'label=\"' + $('input.fld-label', $field).val() + '\" ',\n                roleVals = $.map($('input.roles-field:checked', $field), function(n) {\n                  return n.value;\n                }).join(','),\n                roles = (roleVals !== '' ? 'role=\"' + roleVals + '\" ' : ''),\n                desc = 'description=\"' + $('input.fld-description', $field).val() + '\" ',\n                maxLengthVal = $('input.fld-max-length', $field).val(),\n                maxLength = 'max-length=\"' + (maxLengthVal !== undefined ? maxLengthVal : '') + '\" ',\n                fSlash = (!multipleField ? '/' : '');\n\n              var fToggle = $('.checkbox-toggle', $field).is(':checked') ? 'toggle=\"true\" ' : '';\n\n              serialStr += '\\n\\t\\t<field ' + fName + fLabel + fToggle + multiple + roles + desc + (maxLengthVal !== '' ? (maxLengthVal !== undefined ? maxLength : '') : '') + required + type + fSlash + '>';\n              if (multipleField) {\n                c = 1;\n                $('.sortable-options li', $field).each(function() {\n                  let $option = $(this),\n                    optionValue = 'value=\"' + $('.option-value', $option).val() + '\"',\n                    optionLabel = $('.option-label', $option).val(),\n                    selected = $('.select-option', $option).is(':checked') ? ' selected=\"true\"' : '';\n                  serialStr += '\\n\\t\\t\\t<option' + selected + ' ' + optionValue + '>' + optionLabel + '</option>';\n                  c++;\n                });\n                serialStr += '\\n\\t\\t</field>';\n              }\n            }\n          }\n          liCount++;\n        });\n        serialStr += '\\n\\t</fields>\\n</form-template>';\n      } // if \"$(this).children().length >= 1\"\n\n    });\n    return (serialStr);\n  };\n})(jQuery);\n","(function($) {\r\n  'use strict';\r\n  var FormBuilder = function(element, options) {\r\n\r\n    var defaults = {\r\n      dataType: 'json', // xml or json\r\n      // Uneditable fields or other content you would like to\r\n      // appear before and after regular fields.\r\n      disableFields: {\r\n        // before: '<h2>Header</h2>',\r\n        // after: '<h3>Footer</h3>'\r\n      },\r\n      // array of objects with fields values\r\n      // ex:\r\n      // defaultFields: [{\r\n      //   label: 'First Name',\r\n      //   name: 'first-name',\r\n      //   required: 'true',\r\n      //   description: 'Your first name',\r\n      //   type: 'text'\r\n      // }, {\r\n      //   label: 'Phone',\r\n      //   name: 'phone',\r\n      //   description: 'How can we reach you?',\r\n      //   type: 'text'\r\n      // }],\r\n      defaultFields: [],\r\n      roles: [{\r\n        value: 1,\r\n        label: 'Administrator'\r\n      }],\r\n      saveUrl: false,\r\n      showWarning: false,\r\n      serializePrefix: 'frmb',\r\n      labels: {\r\n        add: 'Add Item',\r\n        allowSelect: 'Allow Select',\r\n        autocomplete: 'Autocomplete',\r\n        cannotBeEmpty: 'This field cannot be empty',\r\n        checkboxGroup: 'Checkbox Group',\r\n        checkbox: 'Checkbox',\r\n        checkboxes: 'Checkboxes',\r\n        'class': 'Class',\r\n        clearAllMessage: 'Are you sure you want to remove all items?',\r\n        clearAll: 'Clear All',\r\n        close: 'Close',\r\n        copy: 'Copy To Clipboard',\r\n        date: 'Date Field',\r\n        description: 'Help Text',\r\n        descriptionField: 'Description',\r\n        devMode: 'Developer Mode',\r\n        disableFields: 'These fields cannot be moved.',\r\n        editNames: 'Edit Names',\r\n        editXML: 'Edit XML',\r\n        fieldRemoveWarning: 'Are you sure you want to remove this field?',\r\n        getStarted: 'Drag a field from the right to this area',\r\n        hide: 'Edit',\r\n        id: 'ID',\r\n        label: 'Label',\r\n        labelEmpty: 'Field Label cannot be empty',\r\n        limitRole: 'Limit access to one or more of the following roles:',\r\n        mandatory: 'Mandatory',\r\n        maxLength: 'Max Length',\r\n        minOptionMessage: 'This field requires a minimum of 2 options',\r\n        name: 'Name',\r\n        no: 'No',\r\n        off: 'Off',\r\n        on: 'On',\r\n        optional: 'optional',\r\n        options: 'Options',\r\n        optionLabelPlaceholder: 'Label',\r\n        optionValuePlaceholder: 'Value',\r\n        optionEmpty: 'Option value required',\r\n        paragraph: 'Paragraph',\r\n        preview: 'Preview',\r\n        radioGroup: 'Radio Group',\r\n        radio: 'Radio',\r\n        removeMessage: 'Remove Element',\r\n        remove: '&#215;',\r\n        required: 'Required',\r\n        roles: 'Limit Access',\r\n        save: 'Save Template',\r\n        selectOptions: 'Select Items',\r\n        select: 'Select',\r\n        selectionsMessage: 'Allow Multiple Selections',\r\n        text: 'Text Field',\r\n        textarea: 'Text Area',\r\n        warning: 'Warning!',\r\n        viewXML: 'View XML',\r\n        yes: 'Yes'\r\n      }\r\n    };\r\n\r\n\r\n    var opts = $.extend(true, defaults, options),\r\n      elem = $(element),\r\n      frmbID = 'frmb-' + $('ul[id^=frmb-]').length++;\r\n\r\n\r\n    opts.formID = frmbID;\r\n\r\n    var lastID = 1,\r\n      boxID = frmbID + '-control-box';\r\n\r\n    var UTIL = _helpers(opts);\r\n\r\n    var formData = new Map();\r\n\r\n\r\n    function Field(fieldData) {\r\n      this.elem = elem;\r\n    }\r\n\r\n    Field.prototype.json = () => {\r\n\r\n    };\r\n\r\n\r\n    /**\r\n     * Prepare the properties for the field so they can be generated and edited later on.\r\n     * @param  {object} fieldData\r\n     * @return {array}            an array of property objects\r\n     */\r\n    var prepProperties = function(fieldData) {\r\n      var properties = Object.assign({}, fieldData);\r\n\r\n      var availableRoles = properties.meta.roles.map(function(elem) {\r\n          elem.type = 'checkbox';\r\n          return elem;\r\n        }),\r\n        sortedProperties,\r\n        defaultOrder = ['required', 'label', 'description', 'class', 'roles', 'name'];\r\n\r\n      properties.name = properties.attrs.name || UTIL.nameAttr(properties.attrs.type);\r\n\r\n      // if field type is not checkbox, checkbox/radio group or select list, add max length\r\n      if ($.inArray(properties.type, ['checkbox', 'select', 'checkbox-group', 'date', 'autocomplete']) === -1 && !properties.attrs.maxLength) {\r\n        properties.attrs.maxLength = '';\r\n        defaultOrder.push('maxLength');\r\n      }\r\n\r\n      properties.meta.roles = {\r\n        options: availableRoles,\r\n        value: 1,\r\n        type: 'checkbox'\r\n      };\r\n\r\n      // options need a field for value, label and checkbox to select\r\n      if (fieldData.options) {\r\n        let optionFields = fieldData.options.map(function(elem, index) {\r\n          let option = {\r\n            options: [],\r\n            type: 'none'\r\n          };\r\n          for (var prop in elem) {\r\n            if (elem.hasOwnProperty(prop)) {\r\n              let field = {\r\n                value: elem[prop],\r\n                label: prop,\r\n                name: 'option-' + prop\r\n              };\r\n              if ('selected' === prop) {\r\n                field.type = 'checkbox';\r\n              }\r\n              option.options.push(field);\r\n            }\r\n          }\r\n          return option;\r\n        });\r\n\r\n        properties.options = {\r\n          options: optionFields,\r\n          label: opts.labels.options,\r\n          type: 'none'\r\n        };\r\n      }\r\n\r\n      delete properties.attrs.type;\r\n\r\n      for (var prop in properties) {\r\n        if (properties.hasOwnProperty(prop)) {\r\n          properties[prop] = sortProperties(defaultOrder, prop);\r\n        }\r\n      }\r\n\r\n\r\n      return fieldProperties;\r\n    };\r\n\r\n    var sortProperties = function(order, properties) {\r\n      let sortedProps = [];\r\n      if (Array.isArray(properties)) {\r\n        sortedProps = UTIL.uniqueArray(order.concat(Object.keys(properties))).map(function(elem) {\r\n          let property = {\r\n            name: elem\r\n          };\r\n          if (typeof properties[elem] === 'object') {\r\n            Object.assign(property, properties[elem]);\r\n          } else {\r\n            property.value = properties[elem];\r\n          }\r\n          return property;\r\n        });\r\n      } else {\r\n        sortedProps.push(properties);\r\n      }\r\n\r\n      return sortedProps;\r\n    };\r\n\r\n\r\n\r\n    var fieldTypes = [{\r\n      id: 'text',\r\n      class: 'icon-text'\r\n    }, {\r\n      id: 'autocomplete',\r\n      class: 'icon-autocomplete'\r\n    }, {\r\n      id: 'select',\r\n      class: 'icon-select'\r\n    }, {\r\n      id: 'textarea',\r\n      class: 'icon-text-area'\r\n    }, {\r\n      id: 'date',\r\n      class: 'icon-calendar'\r\n    }, {\r\n      id: 'radio-group',\r\n      class: 'icon-radio-group'\r\n    }, {\r\n      id: 'checkbox',\r\n      class: 'icon-checkbox'\r\n    }, {\r\n      id: 'checkbox-group',\r\n      class: 'icon-checkbox-group'\r\n    }];\r\n\r\n    // Create draggable fields for formBuilder\r\n    var cbUL = $('<ul/>', {\r\n      id: boxID,\r\n      'class': 'frmb-control'\r\n    });\r\n\r\n    // Setup the input fields\r\n    var frmbFields = fieldTypes.map(function(elem) {\r\n\r\n      // be sure elem.id is converted to camelCase to get label\r\n      let fieldLabel = elem.id.toCamelCase(),\r\n        idName = UTIL.nameAttr(elem.id),\r\n        fieldData = {\r\n          label: opts.labels[fieldLabel],\r\n          meta: {\r\n            description: '',\r\n            roles: opts.roles\r\n          },\r\n          attrs: {\r\n            type: elem.id,\r\n            name: idName,\r\n            'class': elem.class,\r\n            required: false,\r\n            id: idName\r\n          }\r\n        };\r\n\r\n      if ($.inArray(elem.id, ['select', 'checkbox-group', 'radio-group']) !== -1) {\r\n        fieldData.options = [{\r\n          selected: false,\r\n          value: 'option-1-value',\r\n          label: 'Option 1 Label'\r\n        }, {\r\n          selected: false,\r\n          value: 'option-2-value',\r\n          label: 'Option 2 Label'\r\n        }];\r\n      }\r\n\r\n      fieldData.properties = prepProperties(fieldData);\r\n\r\n      return $('<li/>', fieldData.attrs).data('fieldData', fieldData).html(fieldData.label).removeAttr('type');\r\n    });\r\n\r\n    cbUL.append(frmbFields);\r\n\r\n    // Build our headers and action links\r\n    var viewXML = $('<a/>', {\r\n        id: frmbID + '-export-xml',\r\n        text: opts.labels.viewXML,\r\n        'class': 'view-xml'\r\n      }),\r\n      allowSelect = $('<a/>', {\r\n        id: frmbID + '-allow-select',\r\n        text: opts.labels.allowSelect,\r\n        'class': 'allow-select'\r\n      }).prop('checked', 'checked'),\r\n      editXML = $('<a/>', {\r\n        id: frmbID + '-edit-xml',\r\n        text: opts.labels.editXML,\r\n        'class': 'edit-xml'\r\n      }),\r\n      editNames = $('<a/>', {\r\n        id: frmbID + '-edit-names',\r\n        text: opts.labels.editNames,\r\n        'class': 'edit-names'\r\n      }),\r\n      clearAll = $('<button/>', {\r\n        text: opts.labels.clearAll,\r\n        'class': 'clear-all btn btn-default'\r\n      }),\r\n      saveBtn = $('<button/>', {\r\n        id: frmbID + '-save',\r\n        text: opts.labels.save,\r\n        'class': 'save btn btn-primary'\r\n      }),\r\n      formActions = $('<div/>', {\r\n        id: frmbID + '-actions',\r\n        'class': 'form-actions btn-group'\r\n      }),\r\n      actionLinksInner = $('<div/>', {\r\n        id: frmbID + '-action-links-inner',\r\n        'class': 'action-links-inner'\r\n      }).append(editXML, ' | ', editNames, ' | ', allowSelect, ' | ', clearAll, ' |&nbsp;'),\r\n      devMode = $('<span/>', {\r\n        'class': 'dev-mode-link'\r\n      }).html(opts.labels.devMode + ' ' + opts.labels.off),\r\n      actionLinks = $('<div/>', {\r\n        id: frmbID + '-action-links',\r\n        'class': 'action-links'\r\n      }).append(actionLinksInner, devMode);\r\n\r\n    formActions.append(clearAll, saveBtn);\r\n\r\n    // Sortable fields\r\n    var $sortableFields = $('<ul/>').attr('id', frmbID).addClass('frmb').sortable({\r\n      cursor: 'move',\r\n      opacity: 0.9,\r\n      beforeStop: function(event, ui) {\r\n        event = event;\r\n        var lastIndex = $('> li', $sortableFields).length - 1,\r\n          curIndex = ui.placeholder.index();\r\n        UTIL.doCancel = ((curIndex <= 1) || (curIndex === lastIndex));\r\n      },\r\n      over: function(event) {\r\n        $(event.target).parent().addClass('active');\r\n      },\r\n      start: UTIL.startDrag,\r\n      stop: UTIL.stopDrag,\r\n      cancel: 'input, .disabled, .sortable-options, .add, .btn, .no-drag, .prev-holder select',\r\n      placeholder: 'frmb-placeholder'\r\n    });\r\n\r\n    // ControlBox with different fields\r\n    cbUL.sortable({\r\n      helper: 'clone',\r\n      opacity: 0.9,\r\n      connectWith: $sortableFields,\r\n      cursor: 'move',\r\n      placeholder: 'ui-state-highlight',\r\n      start: UTIL.startDrag,\r\n      stop: UTIL.stopDrag,\r\n      revert: 150,\r\n      remove: function(event, ui) {\r\n        if (UTIL.startIndex === 0) {\r\n          cbUL.prepend(ui.item);\r\n        } else {\r\n          $('li:eq(' + (UTIL.startIndex - 1) + ')', cbUL).after(ui.item);\r\n        }\r\n      },\r\n      update: function(event, ui) {\r\n        elem.stopIndex = ($('li', $sortableFields).index(ui.item) === 0 ? '0' : $('li', $sortableFields).index(ui.item));\r\n        if ($('li', $sortableFields).index(ui.item) < 0) {\r\n          $(this).sortable('cancel');\r\n        } else {\r\n          prepFieldVars(ui.item, true);\r\n        }\r\n      },\r\n      receive: function(event, ui) {\r\n        if (ui.sender.hasClass('frmb') || ui.sender.hasClass('frmb-control')) {\r\n          $(ui.sender).sortable('cancel');\r\n        }\r\n      }\r\n    });\r\n\r\n    // Replace the textarea with sortable list.\r\n    elem\r\n      .before($sortableFields)\r\n      .parent()\r\n      .addClass('frmb-wrap')\r\n      .append(actionLinks, viewXML);\r\n\r\n    var cbWrap = $('<div/>', {\r\n      id: frmbID + '-cb-wrap',\r\n      'class': 'cb-wrap'\r\n    }).append(cbUL, formActions);\r\n\r\n    var $formWrap = $('.frmb-wrap').before(cbWrap).append(actionLinks);\r\n\r\n    var doSave = function() {\r\n      if ($(this).parents('li.disabled').length === 0) {\r\n        if ($(this).name === 'label' && $(this).val() === '') {\r\n          return alert('Error: ' + opts.labels.labelEmpty);\r\n        }\r\n        UTIL.save();\r\n      }\r\n    };\r\n\r\n    // Not pretty but we need to save a lot so users don't have to keep clicking a save button\r\n    $('input, select', $sortableFields).on('change', doSave);\r\n    $('input, select', $sortableFields).on('blur', doSave);\r\n\r\n    // Parse saved XML template data\r\n    elem.getTemplate = function() {\r\n      var xml = (elem.val() !== '' ? $.parseXML(elem.val()) : false),\r\n        fields = $(xml).find('field');\r\n      if (fields.length > 0) {\r\n        fields.each(function() {\r\n          prepFieldVars($(this));\r\n        });\r\n      } else if (!xml) {\r\n        // Load default fields if none are set\r\n        if (opts.defaultFields.length) {\r\n          for (var i = opts.defaultFields.length - 1; i >= 0; i--) {\r\n            appendField(opts.defaultFields[i]);\r\n          }\r\n        } else {\r\n          $formWrap.addClass('empty').attr('data-content', opts.labels.getStarted);\r\n        }\r\n        disabledBeforeAfter();\r\n      }\r\n    };\r\n\r\n    var disabledBeforeAfter = function() {\r\n      var li = '<li class=\"disabled __POSITION__\">__CONTENT__</li>';\r\n      if (opts.disableFields.before && !$('.disabled.before', $sortableFields).length) {\r\n        $sortableFields.prepend(li.replace('__POSITION__', 'before').replace('__CONTENT__', opts.disableFields.before));\r\n      }\r\n      if (opts.disableFields.after && !$('.disabled.after', $sortableFields).length) {\r\n        $sortableFields.append(li.replace('__POSITION__', 'after').replace('__CONTENT__', opts.disableFields.after));\r\n      }\r\n    };\r\n\r\n    var prepFieldVars = function($field) {\r\n      var fieldData = $field.data('fieldData');\r\n      appendField(fieldData);\r\n      $formWrap.removeClass('empty');\r\n      disabledBeforeAfter();\r\n    };\r\n\r\n    /**\r\n     * Append our field to the stage\r\n     * @param  {object} fieldData\r\n     * @return {string}           markup for our field, includes properties and preview\r\n     */\r\n    var appendField = function(fieldData) {\r\n      var li = '',\r\n        delBtn = UTIL.markup('a', {\r\n          'class': 'del-button btn',\r\n          title: opts.labels.removeMessage,\r\n          id: 'del_' + lastID\r\n        }, opts.labels.remove),\r\n        toggleBtn = UTIL.markup('a', {\r\n          id: 'frm-' + lastID,\r\n          'class': 'toggle-form btn icon-pencil',\r\n          title: opts.labels.hide\r\n        }),\r\n        required = UTIL.markup('span', {\r\n          'class': 'required-asterisk'\r\n        }, '*'),\r\n        tooltip = (fieldData.description ? UTIL.markup('span', {\r\n          'class': 'tooltip-element',\r\n          tooltip: fieldData.description\r\n        }, '?') : ''),\r\n        fieldLabel = UTIL.markup('div', {\r\n          'class': 'field-label'\r\n        }, [fieldData.label, required, tooltip]),\r\n        fieldActions = UTIL.markup('div', {\r\n          'class': 'field-actions'\r\n        }, [toggleBtn, delBtn]);\r\n\r\n      var liContent = UTIL.markup('div', {\r\n        'class': 'field-properties'\r\n      }, fieldSettings(fieldData));\r\n\r\n      li = UTIL.markup('li', {\r\n        // id: 'frm-' + lastID + '-item',\r\n        id: UTIL.nameAttr(fieldData.attrs.type),\r\n        'data-type': fieldData.attrs.type,\r\n        'class': fieldData.attrs.type + ' form-field'\r\n      }, [fieldActions, fieldLabel, fieldPreview(fieldData), liContent]);\r\n\r\n      if (elem.stopIndex) {\r\n        $('li', $sortableFields).eq(elem.stopIndex).after(li);\r\n      } else {\r\n        $sortableFields.append(li);\r\n      }\r\n\r\n      $(document.getElementById('frm-' + lastID + '-item')).hide().slideDown(250);\r\n\r\n      lastID++;\r\n\r\n      let curFieldData = JSON.stringify(fieldData);\r\n      formData.set(fieldData.attrs.id, curFieldData);\r\n      UTIL.save();\r\n    };\r\n\r\n    var fieldSettings = function(fieldData) {\r\n      let markup = [],\r\n        propertyMarkup = fieldProperties(fieldData.properties).join('');\r\n      markup.push(propertyMarkup);\r\n\r\n      return markup.join('');\r\n    };\r\n\r\n    /**\r\n     * Build the editable properties for the field\r\n     * @param  {object} fieldData configuration object for field\r\n     * @return {string}        markup for advanced fields\r\n     */\r\n    var fieldProperties = function(properties) {\r\n      return properties.map(function(property) {\r\n        let field = UTIL.markup('div', {\r\n          'class': `field-property ${property.name}-wrap`\r\n        }, fieldSetting(property));\r\n        return field;\r\n      });\r\n    };\r\n\r\n    var fieldSetting = function(property, depth = 0) {\r\n      var name = property.name || '',\r\n        propertyId = (name + '-' + lastID).replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(),\r\n        label = property.label || opts.labels[name.toCamelCase()] || false,\r\n        fields = property.fields || [],\r\n        type = property.type || 'text',\r\n        value = property.value || '',\r\n        setting = [];\r\n\r\n      if (name === 'required') {\r\n        type = 'checkbox';\r\n      }\r\n\r\n      if (property.options) {\r\n        depth++;\r\n        fields = property.options.map(function(val) {\r\n          return fieldSetting(val, depth);\r\n        });\r\n\r\n        fields = UTIL.markup('div', {\r\n          'class': 'property-options-' + depth\r\n        }, fields);\r\n      }\r\n\r\n      if ('none' !== type) {\r\n\r\n        let attrs = {\r\n          type: type,\r\n          name: propertyId,\r\n          value: value,\r\n          id: propertyId,\r\n          'class': 'edit-' + name\r\n        };\r\n\r\n        if (depth === 2) {\r\n          attrs.placeholder = label.charAt(0).toUpperCase() + label.slice(1);\r\n        } else if (depth === 1) {\r\n          setTimeout(function() {\r\n            $('.property-options-1', document.getElementById('frm-' + lastID + '-item')).sortable();\r\n          }, 1000);\r\n        }\r\n\r\n        setting.push(UTIL.markup('input', attrs));\r\n      }\r\n\r\n      if (label) {\r\n        setting.push(UTIL.markup('label', {\r\n          'for': propertyId\r\n        }, label));\r\n      }\r\n\r\n      setting.push(setting, fields);\r\n\r\n      return setting.join('');\r\n    };\r\n\r\n    /**\r\n     * Generate preview markup\r\n     * @param  {object} attrs\r\n     * @return {string}       preview markup for field\r\n     */\r\n    var fieldPreview = function(fieldData) {\r\n\r\n      delete fieldData.attrs.class;\r\n\r\n      var field = {},\r\n        type = fieldData.attrs.type.toCamelCase();\r\n\r\n      field.text = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs),\r\n          field = `<input ${fieldAttrs}>`,\r\n          value = fieldData.attrs.value || '',\r\n          fieldLabel = `<label for=\"${fieldData.attrs.id}\">${fieldData.label}</label>`,\r\n          templates = {};\r\n\r\n        templates.text = fieldLabel + field;\r\n        templates.password = templates.text;\r\n        templates.autocomplete = templates.text;\r\n        templates.date = templates.text;\r\n\r\n        return templates[fieldData.attrs.type];\r\n      };\r\n\r\n\r\n      field.password = Object.assign(field.text);\r\n      field.email = field.text;\r\n      field.date = field.text;\r\n      field.autocomplete = field.text;\r\n\r\n\r\n      field.textarea = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs),\r\n          value = fieldData.attrs.value || '',\r\n          textArea = `<textarea ${fieldAttrs}>${value}</textarea>`,\r\n          fieldLabel = `<label for=\"${fieldData.attrs.id}\">${fieldData.label}</label>`;\r\n\r\n        return fieldLabel + textArea;\r\n      };\r\n\r\n      field.checkbox = function(fieldData) {\r\n        let fieldAttrs = UTIL.attrString(fieldData.attrs);\r\n        return `<label for=\"${fieldData.attrs.id}\"><input ${fieldAttrs}> ${fieldData.label}</label>`;\r\n      };\r\n\r\n      field.radio = field.checkbox;\r\n\r\n      field.select = function(fieldData) {\r\n        let options,\r\n          attrs = fieldData.attrs,\r\n          option = (opt) => {\r\n            let selected = opt.selected ? 'selected' : '';\r\n            return `<option value=\"${opt.value}\" ${selected}>${opt.label}</option>`;\r\n          },\r\n          i;\r\n        fieldData.options.reverse();\r\n        for (i = fieldData.options.length - 1; i >= 0; i--) {\r\n          options += option(fieldData.options[i]);\r\n        }\r\n        return `<${attrs.type}>${options}</${attrs.type}>`;\r\n      };\r\n\r\n      field.checkboxGroup = (fieldData) => {\r\n        let preview = [],\r\n          checkbox = Object.assign({}, fieldData);\r\n        checkbox.attrs.type = checkbox.attrs.type.replace('-group', '');\r\n        checkbox.attrs.name = checkbox.attrs.name + '[]';\r\n        delete checkbox.options;\r\n        fieldData.options.forEach(function(option) {\r\n          checkbox.label = option.label;\r\n          checkbox.attrs.value = option.value;\r\n          preview.push(field[checkbox.attrs.type](checkbox));\r\n        });\r\n\r\n        return preview.join('');\r\n      };\r\n\r\n      field.radioGroup = field.checkboxGroup;\r\n      return `<div class=\"prev-holder\">${field[type](fieldData)}</div>`;\r\n    };\r\n\r\n    // ---------------------- UTILITIES ---------------------- //\r\n\r\n    // delete options\r\n    $sortableFields.on('click', '.remove', function(e) {\r\n      e.preventDefault();\r\n      var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\r\n      if (optionsCount <= 2) {\r\n        alert('Error: ' + opts.labels.minOptionMessage);\r\n      } else {\r\n        $(this).parent('li').slideUp('250', function() {\r\n          $(this).remove();\r\n        });\r\n      }\r\n    });\r\n\r\n    // toggle fields\r\n    $sortableFields.on('click', '.toggle-form', function(e) {\r\n      e.preventDefault();\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n      $field.toggleClass('editing');\r\n      $('.prev-holder', $field).slideToggle(250);\r\n      $('.field-properties', $field).slideToggle(250, function() {\r\n        // do something after attr toggle\r\n      });\r\n    });\r\n\r\n    // update preview to label\r\n    $sortableFields.on('keyup', '.edit-label', function(e) {\r\n      $('.field-label', $(this).closest('li')).html($(this).val());\r\n    });\r\n\r\n    // remove error styling when users tries to correct mistake\r\n    $sortableFields.on('keyup', 'input.error', function() {\r\n      $(this).removeClass('error');\r\n    });\r\n\r\n    $sortableFields.on('keyup', '.edit-description', function(e) {\r\n      e.preventDefault();\r\n      var closestToolTip = $('.tooltip-element', $(this).closest('li'));\r\n      if ($(this).val() !== '') {\r\n        if (!closestToolTip.length) {\r\n          var tt = '<span class=\"tooltip-element\" tooltip=\"' + $(this).val() + '\">?</span>';\r\n          $('.field-label', $(this).closest('li')).append(tt);\r\n          // UTIL.initTooltip(tt);\r\n        } else {\r\n          closestToolTip.attr('tooltip', $(this).val()).css('display', 'inline-block');\r\n        }\r\n      } else {\r\n        if (closestToolTip.length) {\r\n          closestToolTip.css('display', 'none');\r\n        }\r\n      }\r\n    });\r\n\r\n    // format name attribute\r\n    $sortableFields.on('keyup', '.edit-name', function() {\r\n      $(this).val(UTIL.safename($(this).val()));\r\n      if ($(this).val() === '') {\r\n        $(this).addClass('field_error').attr('placeholder', opts.labels.cannotBeEmpty);\r\n      } else {\r\n        $(this).removeClass('field_error');\r\n      }\r\n    });\r\n\r\n    $sortableFields.on('keyup', 'input.fld-max-length', function() {\r\n      $(this).val(UTIL.forceNumber($(this).val()));\r\n    });\r\n\r\n    // Delete field\r\n    $sortableFields.on('click', '.del-button', function(e) {\r\n      e.preventDefault();\r\n\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n\r\n      if (opts.showWarning || true) {\r\n        // double check that the user really wants to remove the field\r\n        showRemoveWarning($field);\r\n      } else {\r\n        UTIL.removeField($field);\r\n      }\r\n    });\r\n\r\n    var showRemoveWarning = function($field) {\r\n      $('<div />', {\r\n        title: opts.labels.warning\r\n      }).append(opts.labels.fieldRemoveWarning).dialog({\r\n        modal: true,\r\n        resizable: false,\r\n        dialogClass: 'ite-warning',\r\n        buttons: [{\r\n          text: opts.labels.yes,\r\n          click: function() {\r\n            UTIL.removeField($field);\r\n            $(this).dialog('close');\r\n          }\r\n        }, {\r\n          text: opts.labels.no,\r\n          click: function() {\r\n            $(this).dialog('close');\r\n          }\r\n        }]\r\n      }, opts.labels.warning);\r\n    };\r\n\r\n    // Attach a callback to toggle required asterisk\r\n    $sortableFields.on('click', '.edit-required', function() {\r\n      var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\r\n      requiredAsterisk.toggle();\r\n    });\r\n\r\n    // Attach a callback to toggle roles visibility\r\n    $sortableFields.on('click', '.edit-roles', function() {\r\n      var roles = $(this).siblings('.property-options-1'),\r\n        enableRolesCB = $(this);\r\n      roles.slideToggle(250, function() {\r\n        if (!enableRolesCB.is(':checked')) {\r\n          $('input[type=\"checkbox\"]', roles).removeAttr('checked');\r\n        }\r\n      });\r\n    });\r\n\r\n    $sortableFields.on('mouseenter', 'li.disabled .form-element', function() {\r\n      UTIL.disabledTT($(this));\r\n    });\r\n\r\n    // Attach a callback to close link\r\n    $sortableFields.on('click', '.close-field', function(e) {\r\n      e.preventDefault();\r\n      $(this).parents('li.form-field').find('.toggle-form').trigger('click');\r\n    });\r\n\r\n    $sortableFields.on('hover', '.del-button', function(e) {\r\n      console.log('hovering!!');\r\n      var $field = $(this).parents('.form-field:eq(0)');\r\n      $field.toggleClass('delete');\r\n    });\r\n\r\n    // View XML\r\n    $(document.getElementById(frmbID + '-export-xml')).click(function(e) {\r\n      e.preventDefault();\r\n      var xml = elem.val(),\r\n        $pre = $('<pre />').text(xml);\r\n      $pre.dialog({\r\n        resizable: false,\r\n        modal: true,\r\n        width: 720,\r\n        dialogClass: 'frmb-xml',\r\n        overlay: {\r\n          color: '#333333'\r\n        }\r\n      });\r\n    });\r\n\r\n    // Clear all fields in form editor\r\n    // @todo refactor, this no longer accounts for new data model\r\n    clearAll.click(function(e) {\r\n      e.preventDefault();\r\n      if (window.confirm(opts.labels.clearAllMessage)) {\r\n        $sortableFields.empty();\r\n        elem.val('');\r\n        UTIL.save();\r\n        elem.getTemplate();\r\n      }\r\n    });\r\n\r\n    clearAll.hover(function() {\r\n      $(this).toggleClass('btn-danger').toggleClass('btn-default');\r\n    });\r\n\r\n    // Save Idea Template\r\n    $(document.getElementById(frmbID + '-save')).click(function(e) {\r\n      e.preventDefault();\r\n      if (!$formWrap.hasClass('edit-xml')) {\r\n        UTIL.save();\r\n      }\r\n      UTIL.validateForm(e);\r\n    });\r\n\r\n\r\n    var triggerDevMode = false,\r\n      keys = [],\r\n      devCode = '68,69,86';\r\n    // Super secret Developer Tools\r\n    $('.save.btn').mouseover(function() {\r\n      triggerDevMode = true;\r\n    }).mouseout(function() {\r\n      triggerDevMode = false;\r\n    });\r\n    $(document.documentElement).keydown(function(e) {\r\n      keys.push(e.keyCode);\r\n      if (keys.toString().indexOf(devCode) >= 0) {\r\n        $('.action-links').toggle();\r\n        $('.view-xml').toggle();\r\n        keys = [];\r\n      }\r\n    });\r\n    // Toggle Developer Mode\r\n    $('.dev-mode-link').click(function(e) {\r\n      e.preventDefault();\r\n      var dml = $(this);\r\n      $formWrap.toggleClass('dev-mode');\r\n      dml.parent().css('opacity', 1);\r\n      if ($formWrap.hasClass('dev-mode')) {\r\n        dml.siblings('.action-links-inner').css('width', '100%');\r\n        dml.html(opts.labels.devMode + ' ' + opts.labels.on).css('color', '#8CC63F');\r\n      } else {\r\n        dml.siblings('.action-links-inner').css('width', 0);\r\n        dml.html(opts.labels.devMode + ' ' + opts.labels.off).css('color', '#666666');\r\n        triggerDevMode = false;\r\n        $('.action-links').toggle();\r\n        $('.view-xml').toggle();\r\n      }\r\n    });\r\n\r\n    // Toggle Edit Names\r\n    $(document.getElementById(frmbID + '-edit-names')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('.name_wrap', $sortableFields).slideToggle(250, function() {\r\n        $formWrap.toggleClass('edit-names');\r\n      });\r\n    });\r\n\r\n    // Toggle Allow Select\r\n    $(document.getElementById(frmbID + '-allow-select')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('.allow-multi, .select-option', $sortableFields).slideToggle(250, function() {\r\n        $formWrap.toggleClass('allow-select');\r\n      });\r\n    });\r\n\r\n    // Toggle Edit XML\r\n    $(document.getElementById(frmbID + '-edit-xml')).click(function(e) {\r\n      e.preventDefault();\r\n      $(this).toggleClass('active');\r\n      $('textarea.idea-template').show();\r\n      $('.template-textarea-wrap').slideToggle(250);\r\n      $formWrap.toggleClass('edit-xml');\r\n    });\r\n\r\n    $formWrap.css('min-height', cbUL.height() - 48);\r\n    elem\r\n      .wrap('<div class=\"template-textarea-wrap\"/>')\r\n      .getTemplate();\r\n  };\r\n\r\n\r\n  $.fn.formBuilder = function(options) {\r\n    var form = this;\r\n    return form.each(function() {\r\n      var element = $(this);\r\n      if (element.data('formBuilder')) {\r\n        return;\r\n      }\r\n      var formBuilder = new FormBuilder(this, options);\r\n      element.data('formBuilder', formBuilder);\r\n    });\r\n  };\r\n\r\n})(jQuery);\r\n"],"sourceRoot":"/source/"}