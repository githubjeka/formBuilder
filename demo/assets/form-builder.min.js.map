{"version":3,"sources":["form-builder.min.js","helpers.js","form-builder.js"],"names":["_helpers","opts","doCancel","$form","$","document","getElementById","formID","uniqueArray","arrArg","filter","elem","pos","arr","indexOf","startDrag","event","ui","item","addClass","startIndex","this","index","stopDrag","removeClass","sender","sortable","safename","str","replace","toLowerCase","forceNumber","initTooltip","tt","tooltip","find","mouseenter","outerWidth","css","width","stop","fadeIn","mouseleave","fadeOut","hide","save","children","not","dataType","val","toXML","updatePreview","field","preview","html","nameAttr","type","epoch","Date","getTime","htmlEncode","value","text","htmlDecode","validateForm","errors","each","parents","fieldAttr","push","error","labels","labelEmpty","attribute","length","alert","animate","scrollTop","offset","top","targetID","attr","parent","next","slideUp","slideDown","disabledTT","title","removeAttr","data","class","append","outerHeight","left","remove","String","prototype","toCamelCase","matches","toUpperCase","markup","attrs","arguments","undefined","content","attrString","Array","isArray","join","inlineElems","template","attributes","hasOwnProperty","removeField","$field","FormBuilder","element","options"],"mappings":"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","file":"form-builder.min.js","sourcesContent":["'use strict';\n\nvar _helpers = function _helpers(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n      $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = function (arrArg) {\n    return arrArg.filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function (event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function (event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function (str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function (str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function (tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function () {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function () {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function () {\n\n    var $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function (field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function (type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function (value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function (value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function () {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function () {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n            fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function () {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function () {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function (field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function () {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function () {\n    return this.replace(/(\\-\\w)/g, function (matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function (type) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n    var content = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    var inlineElems = ['input'],\n        template = inlineElems.indexOf(type) === -1 ? '<' + type + ' ' + attrs + '>' + content + '</' + type + '>' : '<' + type + ' ' + attrs + '/>';\n    return template;\n  };\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function (attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function ($field) {\n    $field.slideUp(250, function () {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n'use strict';\n\nvar FormBuilder = function FormBuilder(element, options) {\n  'use strict';\n\n  var formBuilder = this;\n\n  var defaults = {\n    prefix: 'fb-',\n    dataType: 'json', // xml or json\n    // Uneditable fields or other content you would like to\n    // appear before and after regular fields.\n    disableFields: {\n      // before: '<h2>Header</h2>',\n      // after: '<h3>Footer</h3>'\n    },\n    // array of objects with fields values\n    // ex:\n    // defaultFields: [{\n    //   label: 'First Name',\n    //   name: 'first-name',\n    //   required: 'true',\n    //   description: 'Your first name',\n    //   type: 'text'\n    // }, {\n    //   label: 'Phone',\n    //   name: 'phone',\n    //   description: 'How can we reach you?',\n    //   type: 'text'\n    // }],\n    // defaultFields: [],\n    roles: [{\n      value: 1,\n      label: 'Administrator'\n    }],\n    saveUrl: false,\n    showWarning: false,\n    serializePrefix: 'frmb',\n    labels: {\n      add: 'Add Item',\n      allowSelect: 'Allow Select',\n      autocomplete: 'Autocomplete',\n      cannotBeEmpty: 'This field cannot be empty',\n      checkboxGroup: 'Checkbox Group',\n      checkbox: 'Checkbox',\n      checkboxes: 'Checkboxes',\n      'class': 'Class',\n      clearAllMessage: 'Are you sure you want to remove all items?',\n      clearAll: 'Clear All',\n      close: 'Close',\n      copy: 'Copy To Clipboard',\n      date: 'Date Field',\n      description: 'Help Text',\n      descriptionField: 'Description',\n      devMode: 'Developer Mode',\n      disableFields: 'These fields cannot be moved.',\n      editNames: 'Edit Names',\n      editXML: 'Edit XML',\n      fieldRemoveWarning: 'Are you sure you want to remove this field?',\n      getStarted: 'Drag a field from the right to this area',\n      hide: 'Edit',\n      id: 'ID',\n      label: 'Label',\n      labelEmpty: 'Field Label cannot be empty',\n      limitRole: 'Limit access to one or more of the following roles:',\n      mandatory: 'Mandatory',\n      maxLength: 'Max Length',\n      minOptionMessage: 'This field requires a minimum of 2 options',\n      name: 'Name',\n      no: 'No',\n      off: 'Off',\n      on: 'On',\n      optional: 'optional',\n      options: 'Options',\n      optionLabelPlaceholder: 'Label',\n      optionValuePlaceholder: 'Value',\n      optionEmpty: 'Option value required',\n      paragraph: 'Paragraph',\n      preview: 'Preview',\n      radioGroup: 'Radio Group',\n      radio: 'Radio',\n      removeMessage: 'Remove Element',\n      remove: '&#215;',\n      required: 'Required',\n      roles: 'Limit Access',\n      save: 'Save Template',\n      selectOptions: 'Select Items',\n      select: 'Select',\n      selectionsMessage: 'Allow Multiple Selections',\n      text: 'Text Field',\n      textarea: 'Text Area',\n      warning: 'Warning!',\n      viewXML: 'View XML',\n      yes: 'Yes'\n    }\n  };\n\n  // var opts = Object.assign(defaults, options);\n\n  // opts.fields = function() {\n  //   let fields = [\n  //     'text',\n  //     'textarea',\n  //     'select'\n  //   ];\n\n  //   return fields.map(function(index, elem) {\n\n  //     let field = {\n  //       meta: {\n  //         label: opts.labels[elem]\n  //       },\n  //       attrs: {\n  //         type: elem\n  //       }\n  //     };\n  //     return field;\n  //   });\n\n  // };\n\n  // formBuilder.init = (function(element) {\n  //   formBuilder.controls = new Controls(opts);\n  //   element.appendChild(formBuilder.controls);\n  // })(element);\n};","var _helpers = function(opts) {\n  var _helpers = {\n    doCancel: false\n  },\n  $form = $(document.getElementById(opts.formID));\n\n  /**\n   * Remove duplicates from an array of elements\n   * @param  {array} arrArg array with possible duplicates\n   * @return {array}        array with only unique values\n   */\n  _helpers.uniqueArray = (arrArg) => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  /**\n   * Callback for when a drag begins\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.startDrag = function(event, ui) {\n    event = event;\n    ui.item.addClass('moving');\n    _helpers.startIndex = $('li', this).index(ui.item);\n  };\n\n  /**\n   * Callback for when a drag ends\n   * @param  {object} event\n   * @param  {object} ui\n   */\n  _helpers.stopDrag = function(event, ui) {\n    event = event;\n    ui.item.removeClass('moving');\n    if (_helpers.doCancel) {\n      $(ui.sender).sortable('cancel');\n      $(this).sortable('cancel');\n    }\n  };\n\n  /**\n   * Make strings safe to be used as classes\n   * @param  {string} str string to be converted\n   * @return {string}     converter string\n   */\n  _helpers.safename = function(str) {\n    return str.replace(/\\s/g, '-').replace(/[^a-zA-Z0-9\\-]/g, '').toLowerCase();\n  };\n\n\n  /**\n   * Strips non-numbers from a number only input\n   * @param  {string} str string with possible number\n   * @return {string}     string without numbers\n   */\n  _helpers.forceNumber = function(str) {\n    return str.replace(/[^0-9]/g, '');\n  };\n\n  /**\n   * [initTooltip description]\n   * @param  {[type]} tt [description]\n   * @return {[type]}    [description]\n   */\n  _helpers.initTooltip = function(tt) {\n    var tooltip = tt.find('.tooltip');\n    tt.mouseenter(function() {\n      if (tooltip.outerWidth() > 200) {\n        tooltip.addClass('max-width');\n      }\n      tooltip.css('left', tt.width() + 14);\n      tooltip.stop(true, true).fadeIn('fast');\n    }).mouseleave(function() {\n      tt.find('.tooltip').stop(true, true).fadeOut('fast');\n    });\n    tooltip.hide();\n  };\n\n  // saves the field data to our canvas (elem)\n  _helpers.save = function() {\n\n    let $fieldData = $form.children('li.form-field').not('.disabled');\n\n    // console.log(formData);\n\n    if ('xml' === opts.dataType) {\n      elem.val($form.toXML());\n    } else {\n      // var fieldJSON =\n    }\n  };\n\n  // updatePreview will generate the preview for radio and checkbox groups\n  _helpers.updatePreview = function(field) {\n    var preview;\n\n    // $('.sortable-options li', field).each(function() {\n    //   var option = $('.select-option', $(this))[0].outerHTML;\n    //   var label = $('.option-label', $(this)).val();\n    //   preview += option + ' ' + label + '<br/>';\n    // });\n\n    $('.prev-holder', field).html(preview);\n  };\n\n\n  /**\n   * Generate unique name with epoch timestamp\n   * @param  {string} type eg. 'text'\n   * @return {string}      'text-1443885404543'\n   */\n  _helpers.nameAttr = function(type) {\n    var epoch = new Date().getTime();\n    return type + '-' + epoch;\n  };\n\n  _helpers.htmlEncode = function(value) {\n    return $('<div/>').text(value).html();\n  };\n\n  _helpers.htmlDecode = function(value) {\n    return $('<div/>').html(value).text();\n  };\n\n  /**\n   * Some basic validation before submitting our form to the backend\n   * @return {void}\n   */\n  _helpers.validateForm = function() {\n    var errors = [];\n    // check for empty field labels\n    $('input[name=\"label\"], input[type=\"text\"].option', $form).each(function() {\n      if ($(this).val() === '') {\n        var field = $(this).parents('li.form-field'),\n          fieldAttr = $(this);\n\n        errors.push({\n          field: field,\n          error: opts.labels.labelEmpty,\n          attribute: fieldAttr\n        });\n      }\n    });\n\n    // @todo add error = { noVal: opts.labels.labelEmpty }\n    if (errors.length) {\n      alert('Error: ' + errors[0].error);\n      $('html, body').animate({\n        scrollTop: errors[0].field.offset().top\n      }, 1000, function() {\n        var targetID = $('.toggle-form', errors[0].field).attr('id');\n        $('.toggle-form', errors[0].field).addClass('open').parent().next('.prev-holder').slideUp(250);\n        $(document.getElementById(targetID + '-fld')).slideDown(250, function() {\n          errors[0].attribute.addClass('error');\n        });\n      });\n    }\n  };\n\n  /**\n   * Display a custom tooltip for disabled fields.\n   * @param  {object} field [description]\n   * @return {void}\n   */\n  _helpers.disabledTT = function(field) {\n    var title = field.attr('data-tooltip');\n    if (title) {\n      field.removeAttr('title').data('tip_text', title);\n      var tt = $('<p/>', {\n        'class': 'frmb-tt'\n      }).html(title);\n      field.append(tt);\n      tt.css({\n        top: -tt.outerHeight(),\n        left: -15\n      });\n      field.mouseleave(function() {\n        $(this).attr('data-tooltip', field.data('tip_text'));\n        $('.frmb-tt').remove();\n      });\n    }\n  };\n\n  /**\n   * Convert hyphenated strings to camelCase\n   * @return {string}\n   */\n  String.prototype.toCamelCase = function() {\n    return this.replace(/(\\-\\w)/g, function(matches) {\n      return matches[1].toUpperCase();\n    });\n  };\n\n  /**\n   * Generate markup wrapper where needed\n   * @param  {string} type\n   * @param  {object} attrs\n   * @param  {string} content we wrap this\n   * @return {string}\n   */\n  _helpers.markup = function(type, attrs = {}, content = '') {\n    attrs = _helpers.attrString(attrs);\n    content = Array.isArray(content) ? content.join('') : content;\n    let inlineElems = ['input'],\n      template = inlineElems.indexOf(type) === -1 ? `<${type} ${attrs}>${content}</${type}>` : `<${type} ${attrs}/>`;\n    return template;\n  };\n\n\n  /**\n   * Takes and object of attributes and converts them to string\n   * @param  {object} attrs\n   * @return {string}\n   */\n  _helpers.attrString = function(attrs) {\n    var attributes = [];\n    for (var attr in attrs) {\n      if (attrs.hasOwnProperty(attr)) {\n        attributes.push(attr + '=\"' + attrs[attr] + '\"');\n      }\n    }\n    return attributes.join(' ');\n  };\n\n\n  /**\n   * Remove a field from the form\n   * @param  {object} $field [description]\n   */\n  _helpers.removeField = function($field) {\n    $field.slideUp(250, function() {\n      $(this).remove();\n      _helpers.save();\n    });\n  };\n\n  return _helpers;\n};\n","var FormBuilder = function(element, options) {\r\n  'use strict';\r\n\r\n  var formBuilder = this;\r\n\r\n  var defaults = {\r\n    prefix: 'fb-',\r\n    dataType: 'json', // xml or json\r\n    // Uneditable fields or other content you would like to\r\n    // appear before and after regular fields.\r\n    disableFields: {\r\n      // before: '<h2>Header</h2>',\r\n      // after: '<h3>Footer</h3>'\r\n    },\r\n    // array of objects with fields values\r\n    // ex:\r\n    // defaultFields: [{\r\n    //   label: 'First Name',\r\n    //   name: 'first-name',\r\n    //   required: 'true',\r\n    //   description: 'Your first name',\r\n    //   type: 'text'\r\n    // }, {\r\n    //   label: 'Phone',\r\n    //   name: 'phone',\r\n    //   description: 'How can we reach you?',\r\n    //   type: 'text'\r\n    // }],\r\n    // defaultFields: [],\r\n    roles: [{\r\n      value: 1,\r\n      label: 'Administrator'\r\n    }],\r\n    saveUrl: false,\r\n    showWarning: false,\r\n    serializePrefix: 'frmb',\r\n    labels: {\r\n      add: 'Add Item',\r\n      allowSelect: 'Allow Select',\r\n      autocomplete: 'Autocomplete',\r\n      cannotBeEmpty: 'This field cannot be empty',\r\n      checkboxGroup: 'Checkbox Group',\r\n      checkbox: 'Checkbox',\r\n      checkboxes: 'Checkboxes',\r\n      'class': 'Class',\r\n      clearAllMessage: 'Are you sure you want to remove all items?',\r\n      clearAll: 'Clear All',\r\n      close: 'Close',\r\n      copy: 'Copy To Clipboard',\r\n      date: 'Date Field',\r\n      description: 'Help Text',\r\n      descriptionField: 'Description',\r\n      devMode: 'Developer Mode',\r\n      disableFields: 'These fields cannot be moved.',\r\n      editNames: 'Edit Names',\r\n      editXML: 'Edit XML',\r\n      fieldRemoveWarning: 'Are you sure you want to remove this field?',\r\n      getStarted: 'Drag a field from the right to this area',\r\n      hide: 'Edit',\r\n      id: 'ID',\r\n      label: 'Label',\r\n      labelEmpty: 'Field Label cannot be empty',\r\n      limitRole: 'Limit access to one or more of the following roles:',\r\n      mandatory: 'Mandatory',\r\n      maxLength: 'Max Length',\r\n      minOptionMessage: 'This field requires a minimum of 2 options',\r\n      name: 'Name',\r\n      no: 'No',\r\n      off: 'Off',\r\n      on: 'On',\r\n      optional: 'optional',\r\n      options: 'Options',\r\n      optionLabelPlaceholder: 'Label',\r\n      optionValuePlaceholder: 'Value',\r\n      optionEmpty: 'Option value required',\r\n      paragraph: 'Paragraph',\r\n      preview: 'Preview',\r\n      radioGroup: 'Radio Group',\r\n      radio: 'Radio',\r\n      removeMessage: 'Remove Element',\r\n      remove: '&#215;',\r\n      required: 'Required',\r\n      roles: 'Limit Access',\r\n      save: 'Save Template',\r\n      selectOptions: 'Select Items',\r\n      select: 'Select',\r\n      selectionsMessage: 'Allow Multiple Selections',\r\n      text: 'Text Field',\r\n      textarea: 'Text Area',\r\n      warning: 'Warning!',\r\n      viewXML: 'View XML',\r\n      yes: 'Yes'\r\n    }\r\n  };\r\n\r\n  // var opts = Object.assign(defaults, options);\r\n\r\n  // opts.fields = function() {\r\n  //   let fields = [\r\n  //     'text',\r\n  //     'textarea',\r\n  //     'select'\r\n  //   ];\r\n\r\n  //   return fields.map(function(index, elem) {\r\n\r\n  //     let field = {\r\n  //       meta: {\r\n  //         label: opts.labels[elem]\r\n  //       },\r\n  //       attrs: {\r\n  //         type: elem\r\n  //       }\r\n  //     };\r\n  //     return field;\r\n  //   });\r\n\r\n  // };\r\n\r\n\r\n\r\n  // formBuilder.init = (function(element) {\r\n  //   formBuilder.controls = new Controls(opts);\r\n  //   element.appendChild(formBuilder.controls);\r\n  // })(element);\r\n\r\n};\r\n"],"sourceRoot":"/source/"}